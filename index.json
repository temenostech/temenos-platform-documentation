{
  "home/tutorials-assemble.html": {
    "href": "home/tutorials-assemble.html",
    "title": "Assemble Tutorials",
    "keywords": "Assemble Tutorials Check out our video tutorials!"
  },
  "index.html": {
    "href": "index.html",
    "title": "What is Temenos Continuous Deployment?",
    "keywords": "What is Temenos Continuous Deployment? Temenos Continuous Deployment (TCD) is an offering from Temenos SaaS that provides client individuals and teams with the ability to manage, configure and assemble client licensed Temenos Software. Temenos Continuous Deployment enables you to create Environments, i.e. Temenos Suites on-demand, for non-production use in the cloud. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity. Temenos Continuous Deployment What is the “Assemble” service module of the Temenos Continuous Deployment? “Assemble” module provides a DevOps solution to perform continuous integration and delivery of Temenos Products, its customisation and thereby enabling faster time to market. The Assemble service module can accelerate the pace of change and increase confidence in the software deliveries by managing the Assemble of Components (updates, main release, and Level 3 developments), the provisioning into testing Environments, the execution of tests scripts, and providing detailed dashboards of the results. This Assemble service module further allows the Client to configure Products and Releases, which match their own specific needs. The main objective being to streamline ongoing change and accelerate implementation / upgrade projects. What is the “Extend” service module of the Temenos Continuous Deployment? The Extend module of the Temenos Continuous Deployment is used by the ‘change the bank’ teams for self-service management of Environments and provides access to the tools for enhancing Temenos solutions. The portal enables authorised users to provision Environments from a list of Templates. These Environments are for non-production use during development, test, integration, implementation phases. Features Self-service environment provisioning An authenticated user, e.g. a developer or tester, has the ability to request an environment from the catalogue of templates; this template will be materialised into compute, storage, and networks on the Temenos SaaS. The administrator, e.g. the project manager, is in control of number of the users and maximum number of running environments, thus having total control of the platform and its usage. Secure configuration and environment management A developer, is able to configure a personal SSH Key on their user profile and use this key to securely push changes over SSH. Deployment of change into the environment is fully automated for configuration, updates, plugins, add-ons and data. These changes can be stored in a software configuration management repository and deployed to the environment via a Continuous Integration / Continuous Deployment process. Controlling the environment A user is able to start, stop, delete, and export data from an environment. Furthermore, a user is able to push a database into the configuration repository and rebuild the environment, thereby refreshing the database back to that point in time and re-apply transactions and configuration as required. As an example, a developer or a tester can load a database and collaborate to validate changes and test cases in a shared environment. Should these users need to delete or migrate an environment, they can export the data, create a fresh environment with the latest release, upload the data and continue working all managed through the portal. Monitoring the environment A user can export the application log data, monitor the status of the environments (started, starting, stopped, stopping, rebuilding), and see the results of any application deployments. Controlling the application The Temenos core banking template exposes endpoints for the user interface and TAFJEE management screens that allows a user to control COB job services."
  },
  "home/access-ud-directories-video.html": {
    "href": "home/access-ud-directories-video.html",
    "title": "",
    "keywords": "Total video time : 7:28 minutes Total demo time : ~ 20 minutes (from which 15 minutes the cloning of the environment) INFO : Create a new environment Create a user on the portal and add the public SSH key Connect via SFTP Client Check and use the Live folders : default log_t24 standalone"
  },
  "home/benefits.html": {
    "href": "home/benefits.html",
    "title": "What are the benefits of Temenos Continuous Deployment Platform?",
    "keywords": "What are the benefits of Temenos Continuous Deployment Platform? Self-service environment provisioning, with centralised control to completely self-service Reduction in projects duration; by eliminating the time to create or wait for an environment Operational expense; subscription service Start development and testing in minutes, not weeks Simple to reproduce identical environments"
  },
  "home/cloud-environments-customize-templates.html": {
    "href": "home/cloud-environments-customize-templates.html",
    "title": "",
    "keywords": "Total video time : 21:02 minutes Total demo time : ~ 40 minutes (from which 15 minutes the cloning of the environment and ~ 10 minutes the rebuild action - the duration depends also on the changes ) INFO : Actions on the environment: Create a user and attach the SSH key . Clone the environment using Tortoise Git. Check the environments folder > Modify the infratemplate.yml and main.yml files. Commit and push the changes to the repository. Rebuild the environment."
  },
  "home/create-dev-env-video.html": {
    "href": "home/create-dev-env-video.html",
    "title": "",
    "keywords": "Total video time : 10:52 minutes Total demo time : ~ 20 minutes (from which ~ 15 minutes the creation of the environment) INFO : Create a new environment Change environment name and description Check Monitor Application endpoint Check Go to Application endpoint to open a T24 instance Clone a repository using Tortoise Git Use available buttons/ functions : stop, rebuild, scale (up and down), export and delete."
  },
  "home/design-studio-tutorials.html": {
    "href": "home/design-studio-tutorials.html",
    "title": "",
    "keywords": "Please note that the tutorials are aimed for the Design Studio 201710 version and is applicable for the latest releases as well. 1. Enquiry Version Localfields 2. Menu COS 3. LocalFields withEnums 4. DATA ESON overview 5. Packager overview 6. Packager profiles 7. Packager Jenkins Integration 8. EnableSourceControl GIT Note For more information please reach out to our team at cloudplatformsupport@temenos.com ."
  },
  "home/enterprise-view.html": {
    "href": "home/enterprise-view.html",
    "title": "Enterprise View",
    "keywords": "Enterprise View This section provides an overview of what the Temenos Continuous Deployment Platform solution is, and how it fits in with the wider Temenos and bank enterprise. Note: UTP is the Unified Temenos Platform, an exclusively internal Temenos program and an umbrella term for work related to improving the way we develop, build, test and release software. The TCD solution is composed of the Extend and Assemble modules to enable the provision of development and Integration test environments. The current state allows for these two modules only. Roadmap features envisage a Deliver module to cover pre-production and production environments. The TCD Extend module is a multi-tenanted provisioning and deployment module that provides Users and/ or other systems with self-service management of Environments and provides access to the tools for enhancing Client Licensed Temenos Software. The Extend module enables authorised Users to provision Environments from a list of Templates for non-production use during development, test, integration, implementation and ongoing changes to the Products. The Extend module is a cloud-hosted platform service and manages Environments in either the Temenos cloud or a Client’s Target Cloud account. Each Environment is a standalone instance of one or more Products or approved third-party applications / products running on the middleware defined in the Template. Each Factory is formed of an Environment and one or more Test Clients. The Test Clients have their own Templates, which define their infrastructure, software Components and configuration. The TCD Assemble module performs the test pipeline automation, continuous integration (“CI”) and continuous delivery (“CD”) of Client’s changes to Client’s Licensed Temenos Software. The Assemble Module utilises the same technologies as the Extend module, and does: deploy Test Clients; execute the Clients’ tests; orchestrate the deployment of Environments with Factories and the promotion of Packages through a workflow; manage storage of test results and application logs; manage the lifecycle of test Environments; provide a dashboard of test results with links to the underlying manifests, templates and, where appropriate, running Environments. The TCD test result dashboard is a multi-tenanted web application hosted and operated by Temenos. The dashboard shows historic test results for a Factory within a configured Release and trends through a web UI pulling data from the Assemble Modules local database and test results and application logs in Target Cloud storage. The TCD Artefact Repository is a third-party artefact repository “Artifactory by Jfrog” . The repository holds all the built software Components that are referenced by the Templates at the relevant test and deploy Stages. The Client will push all of its Product packages to the Artefact Repository"
  },
  "home/faq.html": {
    "href": "home/faq.html",
    "title": "Implementation FAQs",
    "keywords": "Implementation FAQs How can a customer gain access to Deployment Platform? The client should go through the normal procurement process for a Temenos SaaS service. Temenos regional sales. What are the minimum system requirements? Internet access over https. How can a customer deploy the TCD (Temenos Continuous Deployment) Platform? The clients will be supplied with a URL and initial login, from there they will be able to create their own environments at their chosen release, add users for a developer or team of developers and then they can create the environments immediately. The users can create up to the maximum number of environments purchased, once the environment is destroyed, another individual or team can create a new environment up to the maximum. Thus many users can share a single subscription, removing collaboration barriers across the project team while supporting automated testing. Who will handle customers’ queries/issues for Deployment Platform? Support is available through a dedicated online support portal for cloud infrastructure issues. All Product issues remain through the Temenos Customer Support. Data and Security Considerations The Temenos Continuous Deployment is for non-production use only , unless otherwise stated. No 'personal data'; 'confidential' or 'sensitive' data should be stored on any Environment. • Data is encrypted in transit • Access to management facilities requires username/password and/or SSH certificates • Environments can be deleted immediately by the user. All client-related data will be deleted by Temenos 60 days after the termination of the agreement"
  },
  "home/how-to-assemble.html": {
    "href": "home/how-to-assemble.html",
    "title": "Assemble User Guides",
    "keywords": "Assemble User Guides Find out how to set-up streams, stages, components, products, factories, how to run factories and run tests through step by step user guides."
  },
  "home/how-to-extend.html": {
    "href": "home/how-to-extend.html",
    "title": "Extend User Guides",
    "keywords": "Extend User Guides Find out how to create users, environments, manage the environments, use the available tools, customize and configure applications through step by step user guides."
  },
  "home/Legal.html": {
    "href": "home/Legal.html",
    "title": "Legal and Other Items",
    "keywords": "Legal and Other Items Dependencies for Using DevX Internet connection with access to DevX site pages / ports (all users) Web browser (all users) Git client (for developers) Git (/ɡɪt/) is a version control system for tracking changes in computer files and coordinating work on those files among multiple people. A client program for Git is required to push artefacts into the configuration repository SFTP client (for developers) A secure ftp (SFTP) client is required to download exported log files and data from an environment SSH key creation tools (for developers) Design Studio to modify core banking (T24) T24 licence – (TEMPLATES WILL ONLY BE MADE AVAILBLE FOR LICENSED PRODUCTS) Exclusions Custom Templates (see ‘Definitions’) – Request for service. Setup and Configuration of Continuous Integration / Continuous Deployment – automation tooling for building/deploying/testing software to environments. Source Code Management system – a tool to store and manage source code. Virtual Private Network (VPN) setup. A VPN is a secure tunnel between disparate networks across public internet (e.g. between Temenos’ Azure networks and Client networks). Design Studio – is the Temenos tooling used to develop changes for core banking (T24). Support and SLAs Initial support mechanism: email CloudPlatformSupport@temenos.com Future state support mechanism: Temenos SaaS ticketing system SLAs: target 99% Uptime (can go down for maintenance, business hours) Warranties: Other SLAs as per Temenos SaaS Data retention: as defined in the Service Definition – data & environments can be deleted immediately by the user. All client-related data & environments will be deleted by Temenos 60 days after the termination of the agreement. Definitions Application – A Temenos product built to run in DevX (e.g. core banking) Template – a definition of an Application which may be provisioned into DevX. Includes information such as server size, basic server setup, Application/version to be provisioned, and technology stack used to run the Application. Environment – one or more running instances of an Application, all associated resources, and configuration. Associated resources include the Configuration Repository and the Exports file storage allocation. Organisation – the top level hierarchical unit to control access and groups of Environments User – a unit that represents a person or system linked to an Organisation; whose properties and credentials are checked to access an Organisation Subscription Limit - a number of environments that an Organisation is permitted to create"
  },
  "home/manage-artifactory-test-cycle-video.html": {
    "href": "home/manage-artifactory-test-cycle-video.html",
    "title": "",
    "keywords": "Total video time : 2:19 minutes INFO : After setting-up a factory, go to Dashboard on the main menu and (in case you have more factories). select the factory you created Click Run Now."
  },
  "home/manage-factories-video.html": {
    "href": "home/manage-factories-video.html",
    "title": "",
    "keywords": "Total video time : 2:19 minutes INFO : After setting-up a factory, go to Dashboard on the main menu and select the factory you created Click Run Now ."
  },
  "home/manage-stages-video.html": {
    "href": "home/manage-stages-video.html",
    "title": "",
    "keywords": "Total video time : 4:42 minutes INFO : Click on Stage button, make sure you select the Stream where you want to add a stage Click on New Stage button on top right Fill in the Name Fill in the Description Click Create ."
  },
  "home/overview.html": {
    "href": "home/overview.html",
    "title": "What is Temenos Continuous Deployment?",
    "keywords": "What is Temenos Continuous Deployment? Temenos Continuous Deployment (TCD) is an offering from Temenos SaaS that provides client individuals and teams with the ability to manage, configure and assemble client licensed Temenos Software. Temenos Continuous Deployment enables you to create Environments, i.e. Temenos Suites on-demand, for non-production use in the cloud. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity. Temenos Continuous Deployment What is the “Assemble” service module of the Temenos Continuous Deployment? “Assemble” module provides a DevOps solution to perform continuous integration and delivery of Temenos Products, its customisation and thereby enabling faster time to market. The Assemble service module can accelerate the pace of change and increase confidence in the software deliveries by managing the Assemble of Components (updates, main release, and Level 3 developments), the provisioning into testing Environments, the execution of tests scripts, and providing detailed dashboards of the results. This Assemble service module further allows the Client to configure Products and Releases, which match their own specific needs. The main objective being to streamline ongoing change and accelerate implementation / upgrade projects. What is the “Extend” service module of the Temenos Continuous Deployment? The Extend module of the Temenos Continuous Deployment is used by the ‘change the bank’ teams for self-service management of Environments and provides access to the tools for enhancing Temenos solutions. The portal enables authorised users to provision Environments from a list of Templates. These Environments are for non-production use during development, test, integration, implementation phases. Features Self-service environment provisioning An authenticated user, e.g. a developer or tester, has the ability to request an environment from the catalogue of templates; this template will be materialised into compute, storage, and networks on the Temenos SaaS. See architecture. The administrator, e.g. the project manager, is in control of number of the users and maximum number of running environments, thus having total control of the platform and its usage. Secure configuration and environment management A developer, is able to configure a personal SSH Key on their user profile and use this key to securely push changes over SSH. Deployment of change into the environment is fully automated for configuration, updates, plugins, add-ons and data. These changes can be stored in a software configuration management repository and deployed to the environment via a Continuous Integration / Continuous Deployment process. Controlling the environment A user is able to start, stop, delete, and export data from an environment. Furthermore, a user is able to push a database into the configuration repository and rebuild the environment, thereby refreshing the database back to that point in time and re-apply transactions and configuration as required. As an example, a developer or a tester can load a database and collaborate to validate changes and test cases in a shared environment. Should these users need to delete or migrate an environment, they can export the data, create a fresh environment with the latest release, upload the data and continue working all managed through the portal. Monitoring the environment A user can export the application log data, monitor the status of the environments (started, starting, stopped, stopping, rebuilding), and see the results of any application deployments. Controlling the application The Temenos core banking template exposes endpoints for the user interface and TAFJEE management screens that allows a user to control COB job services."
  },
  "home/run-factory-video.html": {
    "href": "home/run-factory-video.html",
    "title": "",
    "keywords": "Total video time : 2:19 minutes"
  },
  "home/technical-overview.html": {
    "href": "home/technical-overview.html",
    "title": "",
    "keywords": ""
  },
  "home/temenos-cloud-templates.html": {
    "href": "home/temenos-cloud-templates.html",
    "title": "How do the cloud templates work?",
    "keywords": "How do the cloud templates work? The Temenos Continuous Deployment Platform has the capability to provision environments in a variety of different configurations. This capability is driven through the concept of 'Templates' - a simplified view of the constituent elements which make up a sandbox configuration, including: Server Size Basic server setup and technology stack T24 version to deploy Templates are used by the provisioning service to create Sandbox environments with the desired configuration, as shown below: By default, new Templates are added with each monthly release of T24. These Templates follow a standard pattern, configuration and technology stack, but with the most recent releases of T24 being deployed. However, the Temenos Continuous Deployment Platform team also offer the ability to create customised Templates for clients. Furthermore, please find here the current templates catalogue. The standard configuration of each template can be explored by clicking the required template from the list."
  },
  "home/tutorials-extend.html": {
    "href": "home/tutorials-extend.html",
    "title": "Extend tutorials",
    "keywords": "Extend tutorials Check out our video tutorials!"
  },
  "home/user-creation-in-paas.html": {
    "href": "home/user-creation-in-paas.html",
    "title": "Introduction",
    "keywords": "Introduction This document can be used by technical staff who need to create Users on the Temenos Continuous Deployment Platform and associate to each user a ssh key. How to create Users The Administrator can navigate to the Users section on the portal, create more users and invite them to access and use the portal using the URL link. In this way the administrator is in control of who receives the URL link and which users can access the Organisation. The users can access their organisation only, view their user profiles and change their password. Note that only the users with the 'Amin' permission can create more users. To create a new user, please refer to the below: • Login to your organisation portal using the link and the credentials provided. • Go to the menu on the left and then click Users tab, as below: The first screen that you will see is the one for the existing user (usually admin). Click New user button on the top-right corner. This will create a new user in your organisation. This new user will be automatically assigned to all GitLab Repositories from within all environments. If you have already a user created, you can click on the user and update the SSH key box with the one created above. User Roles Management By default, when your organisation is created, Temenos will provide you the link and access instructions to your designated organisation administrator (the first and only user with full rights on the platform). The administrator can create more users and navigate to the Roles section on the portal to assign various permissions to each user. To create a role, the admin will click on 'New Role' and fill in the blanks: The admin can select which permissions to set to each user. Once the role is created, the admin can assign it to a specific user: go to the 'Users' tab and select the user choose from the drop-down list the user click 'Edit' on the user choose from the drop-down list the role that needs to be assigned To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions. How to use PuTTY SSH client for SSH key generation. Should the users requires access to the source code repository they need to provide their public SSH Keys on the user profile section to gain access. https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ ) You can use any other SSH key generator client. Note If you already have installed a SSH key generator client, you can skip this step. • Download the installer from http://www.putty.org/ • Run the installer and click Next on each screen, without changing anything in configurations. Click Finish once completed. How to create the SSH keys (pair public and private keys) • Open PuTTYgen and click Generate button: • This creates a new SSH key by moving the mouse in the blank area (highlighted in red), as per bellow picture. • After PuTTYgen has finished the key generation, you can save your public key/private key in any location from your local machine. Note In order to have a valid SSH key that can be recognized by Infrastructure, do not use the Save public key button from PuTTygen and just select the whole public key from the PuTTYgen screen and save it in your local machine. • From the PuTTYgen screen you must also save the private key. Press the Save private key button, choose 'Yes' on the next prompt (save the key without a passphrase to protect it) and indicate a name and location for the private key. • The public/private key location on your local machine should look like this: How to add users on the portal with the SSH keys Note All fields are mandatory! See further below how to generate the SSH key • Public SSH key needs to be pasted in SSH Key text box. Open Windows Explorer and locate your public key generated using PuTTY Key Generator. • Right click and open it with notepad. Select all and copy to clipboard. Paste the copied text into the SSH Key text box and click Create user button. Your user is now available in the user list: You have the option to edit or to delete it. Note Once created, you cannot change the name and the email address, nor the user's password. You can only update (or add) the SSH key through edit button. Your username will be created in Gitlab server and public SSH key provided will be added to your account being accessible from all the environments created in your organisation. For further details or issues related to Gitlab SSH keys usage, or other operating systems (MAC, Linux), please consult this link: [https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/]( User Roles Required To be able to create a user the below permission needs to be enabled for your user: CREATE _ USER"
  },
  "home/users.html": {
    "href": "home/users.html",
    "title": "Users",
    "keywords": "Users The Administrator can navigate to the Users section on the portal, create more users and invite them to access the organisation using the URL link. This way the administrator is in control of who receives the URL link and which users can access the organisation. The users can access his Organisation only, view their user profile and change their password. Should the users requires access to the source code repository they need to provide their public SSH Keys on the user profile section to gain access."
  },
  "home/what-is-devx.html": {
    "href": "home/what-is-devx.html",
    "title": "What is Temenos Development Platform?",
    "keywords": "What is Temenos Development Platform? Development Platform is a product within the Temenos SaaS suite, and is cloud based infrastructure for use during development, test, implementation, and ongoing change with configurable and scalable Temenos Suites on-demand, unless otherwise stated. Development Platform enables you to create Environments, i.e. Temenos Suites on-demand, for non-production use in the cloud. Environments can be requested and provisioned within minutes rather than weeks helping you accelerate your projects. Retail Suite is readily available, with all other Temenos Suites (Corporate, Wealth, Micro-Finance and Islamic Banking) available on request and allows you to develop and test your proof of concept, share development environments across dispersed teams, replicate production environments or use them for training. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity."
  },
  "home/techguides/access-fcm-ud-directories.html": {
    "href": "home/techguides/access-fcm-ud-directories.html",
    "title": "Access FCM UD Directories via SFTP",
    "keywords": "Access FCM UD Directories via SFTP and GitLab Learn how to easily access the FCM UD directories of your sandbox, without the need of exporting zip files, but using symbolic links on the SFTP server to the T24 VM machines or cloning the environment on your local machine. Access FCM UD Directories via SFTP Create New Environment Learn how here . Mentions: From Cloud Native field select FCM Please select the FCM Template that was assigned to your organisation It will take about 60-90 minutes for the new environment to be created Create a User on the Portal This is required later when connecting to T24 through SFTP server connection, because it checks the authentication to the cloud environment with that specific user and the attached SSH key. To see all the steps regarding how to add a new user on the portal and to attach the SSH key, please see the following user guide about how to Create Users . Connect via SFTP Client In order to have access to the FCM Cloud Application live folders, you can install an FTP client from https://winscp.net/eng/index.php Open WinSCP application and fill the mandatory fields: Host name > copy it from the environment endpoint: sftp.temenos.cloud (see image below) User name > input the exact name of the user added to the portal click Advanced on the new screen (the right screenshot below), select SSH - Authentication upload the private key previously saved (corresponding to the public key attached to the portal user) and click OK now you can click Login on the lef-side screenshot Check and Use Live Folders after logging in, on the right window, locate your environment ID double click to access the live folders of the environment you will be able to see and access the following FCM live folders structure. These folders will be populated by the client with the accounts, customer-information and operations desired. Once processed the formation will dissapear from SFTP and will be visible in the FCM application. accounts customer-information operations Access FCM UD Directories via GitLab Clone the GitLab repository of your Environment in your local machine. For more details on how to clone a repository, check this page . The cloned repo will look as per the screenshot below. click to open the folder. You will see the following sub-folders: if you click on the client_files folder you will be able to see the following sub-folders: The below table explains each folder's role:: Folder Functionality addons This folder is designed for AppDynamics. Upload files as JAR. client_files\\fcmdb Once the cloning process is completed, copy the local FCMDB database in this folder. This will upload your database to the Cloud Environment. IMPORTANT - the convention name is mandatory “FCMDB” (case sensitive) and must be archived as a ZIP file with name FCMDB.zip (case sensitive). If the above conditions are not satisfied, the database will not be uploaded to the Cloud Environment. This procedure will replace the existing database in the cloud with this one. The old database will be lost, including any records that were loaded manually. client_files\\helptext Custom Help Text files can be uploaded in this folder. The file structure must be the same as HELP.TEXT T24 core. Thus, under client_files\\helptext folder, the HelpText folder with subfolders for each component (AA, EB, PP, etc.) is expected. packages One or more T24 DS (Design Studio) packages can be uploaded into this folder. All packages will be deployed automatically inside T24. plugins WAR files can be uploaded in this folder. The files will be deployed inside Jboss EAP. In addition to this, endpoints related to plugins can be automatically added to an application. For more details, check this guide . private_list CSV files can be uploaded in the folder. The updates will be reflected in the FCM application. sanction_list CSV files can be uploaded in the folder. The file contains the client's FCM database and once deployed it will appear in the FCM application. updates The updates files downloaded from the portal in zip format. The files will be copied to the update folder and the T24 Update procedure is triggered. wsdl WSDL files and folders that are required by plug-ins (war file) need to be uploaded here. Note: during the environment creation time the customer can also upload the FCM-Golden copy to the cloud environment. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ USER UPDATE _ USER CREATE _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/access-t24-ud-directories.html": {
    "href": "home/techguides/access-t24-ud-directories.html",
    "title": "Access T24 UD Directories",
    "keywords": "Access T24 UD Directories Learn how to easily access the T24 UD directories of your sandbox and make updates, without the need of exporting zip files, but using symbolic links on the SFTP server to the T24 VM machines. Note Check also our video tutorial . Create New Environment Login to the indicated Temenos Continuous Deployment Platform - either: portal.temenos.com Each time you login, you must accept the Privacy Notice in order to have access to the portal. The first page that is displayed after login is the Environments page where you can fill the date to create a New environment . Fill the mandatory fields: Name Description Select an application from Cloud native applications (select T24) Choose a template from Templates list Labels field is optional Click Create environment Note It will take about 15-20 minutes for the new environment to be created Create a User on the Portal This is required later when connecting to T24 through SFTP server connection, because it checks the authentication to the cloud environment with that specific user and the attached SSH key. To see all the steps regarding how to add a new user on the portal and to attach the SSH key, please see the following user guide about how to Create Users . Connect via SFTP Client In order to have access to the T24/ VM Cloud Application live folders, you can install an FTP client from https://winscp.net/eng/index.php Open WinSCP application and fill the mandatory fields: Host name > copy it from the environment endpoint: sftp.temenos.cloud (see image below) User name > input the exact name of the user added to the portal Click Advanced In the new screen, select SSH Authentication Upload the private key previously saved (corresponding to the public key attached to the portal user) Click OK Previous screen pops-up, click Login Check and Use Live Folders After logging in, on the right window, locate your environment ID Double click to access the live folders of the environment You will be able to see and access the following T24 live folders structure: default log_t24 standalone default - for example, here you can push a message file into the application that you need to test . Also into the default folder, you can create a folder and add some files to it, if you need them to do some specific actions. The folder you create/ add is supposed to point to the T24_HOME location. See below: how to find which is the T24_HOME path. how to point to the T24_HOME path in order to get the response that you need for your application. Find the T24_HOME path: Go to your environment on the portal Click on MONITOR APPLICATION Login with your credentials (these will be provided by Temenos) Then click on tdiag (the path will look similar to this: https://t24-1xxxxxxxxxxxxo.dev.temenos.cloud/TAFJEE/tDiag ) the xxx part represents your environment's id Scroll down a bit until you get to \" TAFJ Runtime properties \" section Here you can see: temn.tafj.runtime.directory.current /opt/rh/eap7/root/usr/share/wildfly/default If for example, you need to create a folder into the default location (/temenossftp/*yourorgid/your id/yourenvid /default) named \"demo\" then, in the T24 area the appropriate path will be **/opt/rh/eap7/root/usr/share/wildfly/default/demo *. Point to the T24_HOME path: Into the newly added folder (on default location), make sure you create a configuration file in which you set also the path to your folder. If for example you want to see a specific log for your application, you will be able to see this log into the log_t24 folder (see below more details). In order to do so, make sure you add a log4j.properties file into the same folder (the newly created) where you specify the path for the logs of your app. EXAMPLE: log4j.appender.FileLog.file=/opt/rh/eap7/root/usr/share/wildfly/modules/com/temenos/tafj/main/log_T24/your_app.log log_t24 - contains the T24.log files and also your como logs files when you run TSAs como - it will load TSA logs when running different TSA services T24.log - refers to the T24 BrowserWeb processes standalone - contains the jboss logs server.log - shows the Jboss application log (standalone folder appeas only for the Extend Templates, Wildfly Template and Stack01 Template). On the other hand, if you download the Stack02 Template instead of 'standalone' you will find the 'appserver' folder which shows WebSphere logs such as startServer.log, stopServer.log, and SystemOut.log To understand better how the SFTP connection works, check below schema: To see how you can push a message to be processed by an application, check this FCM example . Note Make sure you place the files in the appropriate folder belonging to the specific application that you want to use DES - Data Event Streaming Please follow the instructions from this link to learn how to access the events. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ USER UPDATE _ USER CREATE _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/add-app-endpoint.html": {
    "href": "home/techguides/add-app-endpoint.html",
    "title": "Add new endpoints to an environment",
    "keywords": "Add new endpoints to an environment This document can be used by technical staff who need to add new endpoints to the T24 application of a Environment in case of adding any custom endpoints or deploying a plugin in the application server of the Environment. Note This guide presumes that an Environment is already created and available. (In this example, we have created a Environment named DevEnv). Four properties are mandatory to create a new endpoint: (Please note that the user guide contains examples on how to use each of the properties). Property Name Property Description Endpoint Description The Endpoint Description will be displayed in your Organisation Portal in the Endpoints section of the T24 application from your Environment. Endpoint URL The Endpoint URL will be: * opened in a new tab of your browser when the Endpoint Description is clicked, if the Endpoint type is clickable. * copied if the Endpoint type is copyable. * downloaded , if the Endpoint type is a downloadable. Endpoint Type In order to apply above actions, a type must be defined for each endpoint, based on how you want to be used: clickable, copyable or downloadable. -For clickable endpoints is mandatory to add another parameter, Endpoint Append , which can have two values: true - it indicates if the endpoint is a real URL. false - it indicates if it must be appended to T24 URL. - For copyable endpoints is mandatory to have the same endpoint description and endpoint URL (Your_Endpoint_Description = Your_Endpoint_URL). Note The URL must be of type: \"https://........\" . As a reference, if you want to insert an endpoint which links to your environment browser web, please check the related URL - for example: https://t24-xxxxxxxxxxxx.temenos.cloud/BrowserWeb/ ) In order to create new endpoints for the T24 application of your Environment, the next steps must be followed: Clone the GitLab repository of your Environment in your local machine. For more details on how to clone a repository, check this page . Create a file with .endpoint extension inside plugins folder of the cloned repository as in the bellow picture. The name of the file is not important, but it should be relevant for your requirement. Inside the .endpoint file, add a new line for each endpoint with the structure Your_Endpoint_Description~Your_Endpoint_URL~Your_Endpoint_Type , as per bellow picture: Note \" ~ \" character is used as a separator between Endpoint Description, URL and Type and it must always be present in each endpoint line. Endpoint Description and URL are as per your choice. Type must be one of the options: clickable , copyable or downloadable . After creating and editing the .endpoint file, commit the file to the GitLab repository of your Environment. (In this example we have used TortoiseGit to commit and push the endpoint file - Command: Git Commit ->\"master\") Go to your environment to the portal and click the deploy button under the Repository. Wait until the .endpoint file is deployed in your Environment and check the Endpoints section of the T24 application as below: Add multiple endpoints from a single file If a plugin has more than one endpoint, create a .endpoint file and add a separate line for each endpoint item, as below: After the file is deployed, all 4 endpoints from the example are displayed in the Endpoints section of the T24 application. Also note that the endpoints are displayed/ grouped by their type: clickable, copyable and downloadable. Add multiple endpoints from multiple files at the same time If you want to add endpoints for multiple plugins deployed in your Environment, you can add the endpoints of all plugins in a single file or you can also create a separate .endpoint file for each plugin for a better delimitation. After both files are deployed, the three endpoints for plugin1 and the two endpoints for plugin2 are displayed in the Endpoints section of the T24 application. Update/Remove endpoints If you want to update endpoints that were already added to an application, you just have to update the required endpoint line from the .endpoint file, commit the file to the GitLab repository of your Environment and after the file is deployed, the required endpoint will be updated in the Endpoints section of your Application. If you want to remove endpoints that were already added to an application, you just have to remove the required endpoint line from the .endpoint file, commit the file to the GitLab repository of your Environment and after the file is deployed, only the endpoints available in the .endpoint file will be displayed in the Endpoints section of your Application. Also, to remove all the endpoints from a .endpoint file do not remove/ delete the file , but remove all the endpoints lines inside the file (empty the file). Note To summarize, the list of plugin endpoints displayed in the Endpoints section for an application is updated based on the content of .endpoint files available in the plugins folder from the GitLab repository of your Environment. If no .endpoint files are available in the GitLab repository of your Environment, then no plugin endpoints will be displayed. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT REDEPLOY _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/artifactory-test-cycle.html": {
    "href": "home/techguides/artifactory-test-cycle.html",
    "title": "Artifactory Test Cycle",
    "keywords": "Artifactory Test Cycle Temenos uses JFrog Artifactory that serves as a binary repository manager and which is designed to provide an end to end automated solution for tracking artifacts from development to production. See below an example of how the Artifactory folders look like after configuring the streams, stages, components, products and the factory. After creating a Factory and before running it, make sure you have uploaded: all required binaries for the principle (mandatory) components into the source stage (in this case - default_stage). the testcases.zip file into the target stage (in this case - primary_stage_demo). The folder name is TestCases. See here how to upload the components' binaries, respectively here for the test cases."
  },
  "home/techguides/clone-environment.html": {
    "href": "home/techguides/clone-environment.html",
    "title": "Clone a Temenos Continuous Deployment environment",
    "keywords": "Clone a Temenos Continuous Deployment environment One of the features of the Temenos Platform is the possibility to create a clone of an environment. In case different changes have been done such as: modifying the database, addition of new endpoints, installing plugins or others, and is needed a copy of that specific environment with all the changes, this can be easily done by clicking the clone button and creating a clone. Please see below some explanations on how this process works and what are the restrictions during the cloning action. Note Check also our Video tutorial Environment Status during Cloning Note You can not clone an environment if the environment is: Stopping, Rebuilding, Scaling, Exporting or it has a Warning. You can clone an environment only when the status is Started/Starting > the Start button will be disabled. Clone the Environment Select the environment that you want to clone and press Clone button. Input a Name and Description and optionally, a Label , then click Clone . You will get a notification on the screen that the environment cloning has been initiated. Note Use the Refresh List button in order to see the new actions. At this point, there will be created: a New address and a GitHub endpoint with the same content as the cloned one and also a cloned Database (the export of the database is triggered). The new (clone-environment) will have the same template as the source environment. In the Event Tab of the source Environment (the one being cloned), the Event notifications will display the date, time and duration of the Cloning action. The Clone button will be disabled until on the left side of the screen you will notice the new cloned environment being created. The new environment will be visible in the Environments list with the status Creating : The target environment (clone) will display the status Creating for: T24 application H2 database GitHub repository Note It will take around 15-20 minutes for the clone environment to be created. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/components-products.html": {
    "href": "home/techguides/components-products.html",
    "title": "Components – Feature Description",
    "keywords": "Components – Feature Description Components are individually deployable units that are understood by Temenos Continuous Deployment Platform based on the component type that each component refers to. Each component is associated to a component type to help Temenos Continuous Deployment Platform deploy the component. The Component Type field in the component data is the key to help the Temenos Continuous Deployment Platform Controllers deploy the right components in the right way. An organization can define as many components as needed but should have all mandatory components defined in the templates that are assigned to the organization. Practically when a template is assigned to an organization, a list of component types related to that template is added for that organization. Each component has the following fields (all mandatory) : Component Type Name Description Display Name Component Type The TCP uses a convention/ protocol to deploy all parts required to run a full-fledged instance of T24 (Or any other product supported by a template). Such parts to constitute a complete system are called components . The T24 installation may have the following components (No exhaustive or inclusive): T24-Jars T24-ud Helptext Tafj-installer etc. Each item in this list is called a component type . The names of these parts / Component Types are fixed and are not user editable. This is managed internally by the Temenos Continuous Deployment Platform admin/ development group and can only be changed or modified by this group. Each component type represents a deployable unit and has an ansible script associated to it. These components have a structure associated and work in a standardized manner across different deployment stacks (OS, App server variations, DB variations etc). How to Set Up/ Delete Components Set-up/ Create a Component Login to the Temenos Continuous Deployment Platform. Click on Settings button on the left menu > this will expand a menu containing buttons for: Streams, Stages, Products, Factory and General. Before creating a component, make sure you select first the stream (top-right) where you want to add the respective component. Click on Products button. (This button includes creation of the components) Click on the New Component on the top right. Select the Component Type from the dropdown list (the list displays all the components available for your Organization. This is based on the available templates). Input a Name. Take into account these conditions (also notified on the screen): Name can start only with a letter or an underscore and it can contain only letters, digits, underscores or hyphens. Fill the Description. Fill the Display Name. Click Create . See below example: A folder is automatically created into the repository (we are using JFrog Artifactory) with the name of your component and will be always created under the default stable_dev stage. This is the path where the components' files should be uploaded as explained on the next steps. (Please note that the components' artifacts can be uploaded any time before running a factory). (If the related artifacts are not uploaded, running the factory will not be possible and an error message will be thrown). How to login to Artifactory Every user created in the Temenos Continuous Deployment Platform can log in with the platform’s credential on the Artifactory server as well. Follow the steps below to login to the Artifactory: go on the self-side menu on the portal and click on Metadata . here are displayed the metadata settings: copy the Artifactory URL and open it in another browser. To login use with your credentials from the Temenos Continuous Deployment Platform. This is how your Artifactory will be displayed: to see the artifactory repository, click on the Artifactory icon from the left-side menu. The repository belonging to your organisation will be displayed (to make sure you expand the right repository, always check the naming convention: repo-1dq4zcowcn75s1, where what follows after 'repo-' represents the ID of your organisation: How to upload binaries into the Artifactory The users are enabled to download the existing artifacts or upload new artifacts that will be used for factories. This process can be done in two ways: A. Manually access the artifactory and upload the required binary (recommended). Requirements: new user : it is mandatory for the user to have assigned a role which contains CREATE COMPONENT and MANAGE COMPONENTS permissions. existing user : if a user wants to log in to the Artifactory server, the user must change its password and have the CREATE COMPONENT and MANAGE COMPONENTS permissions within the role that was assigned to it. To learn how to change the user roles and permissions please refer to this link . Note for an already created user that wants to have access to the Artifactory Server, the user must change its password and if its role has those 2 permissions, the user will be added in Artifactory Server if the user’s role is updated afterwards , the user still needs to change its password in order to be added to the Artifactory Server the user cannot delete artifacts from the Artifactory Server. Select single or multi depending on the number of archives you need to add, drag and drop or select the archive and then click deploy . You will see a success message and the archive under your component. Note Components artifacts are delivered to clients by Temenos Distribution team. Also the binaries/ artifacts have to be uploaded each time a component is updated. B. Invoke an Artifactory API that will upload the required binary into the appropriate location. In order to invoke that Artifactory API a CURL command must be executed (this can be run manually from a linux VM or from a bash script). curl -H \"X-JFrog-Art-Api:<ArtifactoryKey>\" -X PUT \"<DestinationURL>\" -T <fileToUpload> The ArtifactoryKey can be taken from the TCD portal (go to General and take the value of ARTIFACTORY_KEY record): DestinationURL represents the exact location of the file that will be uploaded in the artifactory together with the name of the binary. For this operation, you need to take the exact path of the artifactory from the TCD portal from the Upload URL field that is displayed on the screen after the component is created: fileToUpload represents the binary that should be uploaded from your local machine and it must contain also the path where is present. Note Open source doesn’t support multiple file uploads at a time, therefore you need to upload the required binaries one by one. Example of the curl command based on the above : curl -H \"X-JFrog-Art-Api:AKCp5dKYyM9WMoiacim9yedAZfG6gLwwcYugPmzZhqHkdRe6ex6pZZnRMteQqedLE9Q3qds6V\" \" https://1dtk4nz95tssg-artifactory.temenos.cloud/artifactory/repo-1dtk4nz95tssg/dev_stream/demo_stage/t24-jars \" -T /drives/c/Users/file/t24-jars-63688104355895.zip For demo purposes, we used MobaXterm to upload the binary into the Artifactory as displayed below: Once the command is run, the binary is uploaded on the Artifactory: Pre-requisites and best practices: ensure that the component name also has information about its version; ensure that the component format that you upload is correct and as delivered by the Temenos team; - the format of the package as delivered by Temenos will as well be supported in TCD. if the Help text file of T24 is given as a .zip, the templates will expect a .zip file for the same, - DS pakages will have the same packaging as bundled by Design Studio - T24 updates are bundled in zip; - you need to get from Temenos distribution team the Toolbox kit that will allow you to generate the system definition file of your T24 environment; - you will be able to download the T24 updates correspondent to your environments from the Temenos Customer Support Portal by uploading the system definition file generated above; - once the updates are downloaded from the portal in a .zip file, you must create another .zip of that downloaded .zip file and only then place it into the artifactory under the correspondent component; ensure that components are uploaded to the appropriate folders (the URL and folder names can be found from the component definition pages of the TCD portal); if the component is uploaded in a .zip format, it it recommended to have a text file describing what is included in the package/ provide reference to the code commit tags to find what is included in the package; do not delete/ edit/ create components/ folders in the artifactory. TCD Portal’s Product and Component sections must be used to create anything in artifactory. T24 golden copy pre-requisites Database - generic No client data Minimal size No archived data or RO database to be provided All test credentials present / injected by the tests The field name DESTINATION.STATIC in IF.INTEGRATION.SERVICE.PARAM must hold the queue name “queue/t24IFInboundQueue” Sanity testing to be performed to ensure that the users can log in, applications can be input, OFS requests can be run, the T24 services specifically INTEGRATION.SERVICE and COB can be run and any known issues which can be ignored should be reported. Once sanity testing is complete, all the TSA services running should be stopped, locks to be removed and TSA.STATUS records to be cleared The t24libs and other jar files (L3,GPACK,CPACK etc) at the time of creating the golden copy should be provided along with the golden copy Database - H2 H2 database username passwords to be provided for the newly created user The DBImport log should be verified to ensure that all the tables, views and the dictionaries in the source matches with the destination A copy of the DBimport log to be provided for verification H2 version 1.4.199 Database - ORACLE The database must be in RPM format The database username and passwords to be provided To ensure that the database shipped is of optimal size, please make sure that the following files are removed before taking a backup 1. From T24 Tables a) Enormous archived files ($ARC files) which do not form as part of the usual day-today-activities. E.g.: Archived Delivery messages, archived Accounting entries) b) Contents of the cache and user specific temporary files to be cleared (F.OS.XML.CACHE, F.ENQUIRY.LEVEL, F.ENQUIRY.SELECT, F.OS.TOKEN, F.OS.TOKEN.USE, F.PROTOCOL, OS.REQUEST.DETAIL) 2. From UD folders a) &COMO&, &HOLD&, &PH&, &SAVEDLISTS& b) Contents of F.DL.DATA, Contents of SWIFT inward and outward message directories, NR related message directories c) Contents of any interface log directories (attached to the OFS.SOURCE records) d) Any other IN and OUT message directories used for interfaces e) User directories or BPs created by developers and the local source code in them for testing purposes Wealth suite golden copy pre-requisites All the wealth templates have the ability to deploy the components listed in THIS document. By clicking on the file you will also find a table with additional details for each component. TAP CORE Database-generic The golden copy of the TAP DB must be obtained by doing an extract using the cloning tool (the cloning tool version to be used should be the one delivered with Wealth distribution) The golden copy of TAP database must be delivered with golden copy of TAP Core binaries (in sync) No client data. Only infrastructure data in sync. With T24 demo model bank data will be imported. Minimal size All data required for tests (including users, data profiles, data security profiles …) must be injected by the tests If T24 is used as a back end system, ensure that the database backups of T24 & TAP are synchronized Client to ensure Components L3 packages are in sync for E2E environment deployment. DatabaseSybase. TAP Web TAP Web golden copy consists only on list of L1 updates (hotfixes) and L3 packages (TAP Web Design studio packages) to be provided Test Script Pre-Requisites Single test library to be used across all products Single format of test sheet used by all products. (All tests follow same automation mechanism during execution in TCD and we can’t change it) Ensure that the test credentials are present in the test sheet (We can’t add passwords before each run) All usernames & passwords to be in the golden copy or injected by tests. (We can’t add users & passwords) Synchronized Golden copies and ensure that the test strategy for uploading the test data is as well synchronized. Which Components to Add In order to know which are the minimum required components that you need to add, you must first check the Templates Catalog (see button on the left menu). From here, select the template that you want to use: Make sure you select first the Template Type (FCM, T24, Tools, Wealth etc.). Then from the available Templates Catalog, select the one that you need in order to check the components. Under Full Template Content, scroll until you see the components section. Note: Usually there are at least two components sections: one related to T24 and another one refers to Model Bank Database (or other db). Depending on the template type, there could be more components, so please make sure you scroll down to check entirely the template in order to add all required components. It is required to add at least all the mandatory components. In addition to the mandatory components, you will need to add those components you need to test - not related to your selected template. For all added components, make sure you add the related files archive into the artifactory as explained above. How to Delete a Component Components fields are not editable, so you have only the options to create or to delete them. Note If your component is attached to a Product , you will not be able to delete it. You need first to delete the product, then return to the component and click Delete button. Products – Feature Description A product is a logical grouping of several components. This is just to make it easy for users to select a list of components to deploy instead of selecting each component in a sequence. A product has the following fields (all mandatory) : Name Description List of constituent components - at least one component is required Ultimately, a product is used in a factory and will be used eventually to deploy the required components. How to Set Up/ Edit/ Delete Products How to Set-up/ Create a Product If you have created more streams, first make sure you select the stream where you want to create the respective product (see top right). Click on Products tab and then on New Product button on the top right. Input a name, description and select the mandatory components from dropdown button. This should represent the Principle Product (or one of the principle products) you will use when creating a factory. Click Create button. See also below example. For components, the selection order is not important. In addition to the principle product which has all template mandatory components, you will need to create other products - Base Products - that will be used to be tested. How to edit a product You can edit: The product description. The components field by adding or removing components. Just click the edit button, do the changes and then click update. How to delete a product Go to the Products tab and select the product you want to delete. Click the delete button. Note If the respective product is attached to a factory, you will not be able to delete. You need to delete the factory first. To see the details of a component please make sure to first select the stream from the top-right-side menu. The list with the components that belong to the respective stream will be displayed on the left side of the page. The same operation applies for the products: Artifactory view The artifactory view displays the uploaded components that are available for the particular stages. By expanding the components, the user triggers a download of the respective component zip file. User Permissions Required To be able to perform the above operations the following permissions need to be enabled for your user: CREATE _ COMPONENT DELETE _ COMPONENT MANAGE _ COMPONENTS MANAGE - ORG - METADATA MANAGE _ STREAMS MANAGE _ STAGES CREATE _ STREAM MANAGE _ PRODUCTS CREATE _ PRODUCT UPDATE _ PRODUCT DELETE _ PRODUCT To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/create-publish-template.html": {
    "href": "home/techguides/create-publish-template.html",
    "title": "How to Create and Publish a New Template after a Successful Factory Run",
    "keywords": "How to Create and Publish a New Template after a Successful Factory Run This feature offers the possibility to baseline a particular version of a product and create a template from that version. Further anybody will be able to create an environment with the baselined version of the product. To set up the factory, follow the steps from here . To run the factory, follow the steps from here . Create and Publish the New Template after the Successful Factory Run There are two alternatives to Create and Publish the new Template after the Successful Run: Automated trigger save the New Template from the Factory Run go to Dashboard on the Factory Run click on 'Actions' and select from the drop-down 'Create New Template Manual trigger click on the newly created environment on the right side of the page click on 'Save as a new template' type in the Template Name and a brief description To see the new template, go to the Templates Catalogue tab. Your template is now available in your templates list. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: MANAGE _ COMPONENTS MANAGE _ STREAMS MANAGE _ STAGES MANAGE _ PRODUCTS CREATE _ FACTORY UPDATE _ FACTORY DELETE _ FACTORY SCHEDULE _ FACTORY START - FACTORY - RUN ABORT - FACTORY - RUN VIEW - FACTORY - RUN _ HISTORY ALLOW - CUSTOM - TEMPLATES To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/stage-testcases.html": {
    "href": "home/techguides/stage-testcases.html",
    "title": "Upload and Delete Test Cases",
    "keywords": "Upload and Delete Test Cases Note: Due to the latest Temenos Continuous Deployment platform upgrades this page will shortly be removed from the documentation portal. You should refer to the Factory Migration instructions instead. Upload Test Cases For any new created stage, there is automatically created into the Artifactory a TestCase folder where the tests can be manually uploaded. After connecting to JFrog Artifactory, you should first identify your stage (based on the name that you gave on the platform). The TestCases folder appears in the repository under the created stage just after the added components as in the example below: It will not be possible to run a factory without uploading the test-cases into the respective folder. Click on the TestCases folder, then in Deploy button on the top right. From here choose Single or Multi based on number of zip folders that you need to upload and drop or select the test cases zip file. Note : In order to be processed the archive must be named exactly like this: testcases.zip . Click the Deploy button that appears on the file selection window. The zip file will be uploaded successfully and will appear under TestCases folder. Delete Test Cases In order to delete the uploaded test cases, click on testcases.zip file, then on the Actions button (under Deploy) and Delete. User Permissions Required To be able to perform the above operation the below permission needs to be enabled for your user: MANAGE _ STAGES To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/stage.html": {
    "href": "home/techguides/stage.html",
    "title": "Stage API/UI – Feature Description",
    "keywords": "Stage API/UI – Feature Description A Stage is a logical name for a promotional stage. Every component/module developed by an organization needs to go through several steps to be declared ready for deployment to product. These steps are exactly what we call stages. Each stage has the following fields: 1. Name: A simple name for the stage Note The name can only be set on creation time and it cannot be updated . 2. Description: A simple description to be helpful to users. 3. Enabled/ Disabled Flag: A stage can be enabled or disabled at any time provided there are no Factories associated to it. When a new stage is created, an isolated folder is created in the Artifactory Server to enable the binary/ installable components to be uploaded. When the components work well with other components/modules, the component is promoted to other stages, as defined by factories. The promotion of the components across stages is conditional based on the status of tests that are done during a factory run. If the tests succeed, the components will be promoted to the next stage. How to Set Up/ Edit/ Delete Stages Set-up/ Create a Stage Login to the Temenos Continuous Deployment Platform. Click on Settings button on the left menu > this will expand a menu containing buttons for: Streams, Stages, Products, Factory and General. Click on Stage button, make sure you select the Stream where you want to add a stage and then on the New Stage on the top right. Fill the name (mandatory field) . Take into account these conditions (also notified on the screen): Name can start only with a letter or an underscore and it can contain only letters, digits, underscores or hyphens. Fill the description (mandatory field) . Click Create . Note : Instead of choosing the enable option, you can create a disabled stage and enable it later, but the default option should be enable. Edit a Stage A stage can have only the description edited/ changed, but not the name. Why? Because when creating a stage, a folder is created automatically in the Artifactory containing the stage name. This folder will contain the components that you may be added for the respective stage. Just click the edit button, change the description and then click update. Default Stage (Configuration Stage) After logging to the portal, go to the General button on the left menu. Here you can see and edit the metadata. The CONFIGURATION STAGE NAME can be defined after the creation of an organization in order to be able to use the assemble features and can be editable . In case it has not been defined at the beginning, then when you try to create a stream, a new field about default stage will appear and here you need to insert a name for the default stage. This field will be automatically added into the metadata and will not be editable . Delete a Stage Note The default stage cannot be deleted (this is the stage configured into the metadata). Example: Suppose we have created a stage named Primary_stage. No matter if we have configured further components and products, we can just go and delete this stage. Any other created stage can be deleted at any moment as it is not dependent of the subsequent features added such as components and products. Components and Products belong to the streams. Example of the default stage defined into the metadata (you can set any name you prefer instead of devstream ): User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: MANAGE _ STAGES CREATE _ STAGE UPDATE _ STAGE DELETE _ STAGE To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/stream.html": {
    "href": "home/techguides/stream.html",
    "title": "Stream UI – Feature Description",
    "keywords": "Stream UI – Feature Description A Stream is a collective name representing all coordinated efforts by an organization (that are registered to use the Assemble module) to make a specific improvement to their deployed product. For example a bank that is running T24 can choose to make a new enhancement to the T24 installation. All efforts to develop, test and release this enhancement can be collectively called a stream . It represents a group dedicated to a specific development feature (or other logical grouping to represent a new feature implementation etc.) that may consist of the following resources: People – Developers, testers, business managers and other people involved in developing new features for the bank. Code and other digital resources – Code specific to the features, Binaries, VMs, Test Scripts etc. Processes – Each team works with a different workflow and may have variations in the processes. Each stream requires an isolated setup of resources to keep their work separate from other streams. For example, each stream will have a separate folder (or repository) for all of their digital resources and can possibly implement a customized workflow for their development promotion. Each stream has other inherent components for it to be useful. The parts of the stream are listed below: Stages Components Products Factories Factory Run Environments These components, together, act as an isolated group of elements for each Stream and help an organization create and manage efforts of a group. An organization can create as many streams as needed. Each stream is just a logical name for the grouping and has nothing more than a “Name” and a “Description”. How to Set-up/ Edit/ Delete Streams Set-up/ Create a Stream Login to the Temenos Continuous Deployment Platform Click on Settings button on the left menu > this will expand a menu containing buttons for: Streams, Stages, Products, Factory and General. Click on Stream button and then on the New Stream on the top right Fill the name (mandatory field) . Take into account these conditions (also notified on the screen): Name can start only with a letter or an underscore and it can contain only letters, digits, underscores or hyphens. Fill the description (mandatory field) . Click Create . Note : Instead of choosing the enable option, you can create a disabled stream and enable it later, but the default option should be enable. After the successful creation, your stream will appear on the screen (in case you already have other streams, the newly created will be the last in chronological order) and it will automatically have associated the default stage named 'stable_dev' (as in current example). Please note that the default stage name is defined in the metadata settings of your organization (On the main menu > General). Edit a Stream You can edit anytime the name, the description of the stage or choose the disable option by clicking the edit button. Clone a Stream You can clone a stream as well. This action will copy the latest version of all components in the default stage to the new stream. When cloning the stream, you can add a stream name, stream description and enable/disable it. Delete a Stream Note In order to delete a stream, you need to delete first all the subsequent features created. See example and explanations below. Example 1: Suppose we have created a stream named demostream that has just the default stage and without adding other stages or configuring further components and products. We can just go and delete this stream (even if it has the **Primary Stage **associated to it). Example 2: Suppose we have created a stream named demostream that has the default stage (Primary Stage) and also a stage named Stable_Dev, without configuring further components and products. In order to be able to delete a stream that has more than the Primary Stage , we need first to go and delete the stages attached to it. Go first to Stages button on the left menu > Select first your stream (top right) > Select the stage that you want to delete (others then the Primary Stage - because this stage cannot be deleted ) > And click the delete button. Go back to Streams and you will notice that your stream has only the Primary Stage associated, therefore you are able to delete the stream. Click the Delete button. If you have added other stages and also components and products, first delete all the products, then the components, then the associated stages and finally you will be able to delete the stream. In case you skip one of these features deletion, the system will notify that is not possible to delete the respective stage. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: MANAGE _ STREAMS CREATE _ STREAM UPDATE _ STREAM DELETE _ STREAM CLONE _ STREAM To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/t24-development-appendix.html": {
    "href": "home/techguides/t24-development-appendix.html",
    "title": "Introduction & Prerequisites",
    "keywords": "Introduction & Prerequisites This developer guide presents the required configurations and the main steps for the following actions: develop new/existent jBC routines and deploy them to your sandbox import/export applications/enquiries/versions from/to your sandbox to/from your local machine extract from the database/load in the database data (.d) files from/to your sandbox to/from your local machine. For this purpose, you need to have access to: Design Studio (locally) T24 libraries (locally) TAFJ (locally) Temenos Sandbox (cloud) Tortoise Git (locally) - download from here . A development package (containing Design Studio, T24 libraries and TAFJ) is provided by Temenos and it is pre-configured in order to be able to introspect T24 application hosted in Temenos Could Development Platform. This package is adapted according to the T24 version of your sandbox and it is provided as a .zip file. After extracting it in your local machine to any location, the bellow foldimers should be available: DS t24Lib TAFJ To be able to interrogate the sandbox database, following update must be applied to tafj.properties file from Your_DEV_Path\\TAFJ\\conf: temn.tafj.jdbc.url=jdbc:h2:tcp:// ENV_DNS :9092/TAFJDB;MODE=Oracle;TRACE_LEVEL_FILE=0; TRACE_LEVEL_SYSTEM_OUT=0;DB_CLOSE_ON_EXIT=FALSE; FILE_LOCK=NO;IFEXISTS=TRUE;CACHE_SIZE=131072; MVCC=TRUE;LOCK_TIMEOUT=30000 Replace ENV_DNS with your environment DNS . See below example: Create New Project in Design Studio In order to accomplish the development actions presented at the beginning of the guide, you need to create a new project in Design Studio. Start Design Studio from DesignStudio folder using StartDesignStudio.bat file and choose the default workspace (Your_DEV_Path\\DesignStudio\\workspace) or any other workspace from your local machine. After Design Studio starts, go to File > New > Project . Select Design Studio Template Project from Design Studio item and click Next . In the next screen, select t24-packager-tafj template from the drop down list and set tafjHome , insertDir and libDir parameters according to Your_DEV_Path. Note VERY IMPORTANT! Make sure you set the following values as per below instructions, otherwise the package installation will fail: project-name - always use small letters as per this standard: xx-name (in current example we used: ft-sample ) release - use the T24 release (example R17, R18, R19 etc.) product-name: use ony two capital letters. Note that it must correspond to your project name: Example: if project-name is xx-name, the product-name must be XX Example: if project-name is ft-sample, the product-name must be FT component name - must be the same as in project name, after the \"-\". Must start with capital letter. Example: if project-name is xx-name, the component-name must be Name Example: if project-name is ft-sample, the component-name must be Sample version: make sure you input the correct version (example 18.11) host - login to the portal, go to your Environment > Go to Application > Select the address of your T24 environment (example: https://t24-1abbbbbccc900.temenos.cloud ) Click Finish to create the project and 4 modules will be created, as per bellow picture. -> ft-sample- data-code : holding basic routines and data files. -> ft-sample- models : holding Design Studio models(applications, enquiries, versions) that can be imported/exported from/to your sandbox. -> ft-sample- models-gen : holding files generated by Design Studio from the ft-sample- models project. -> ft-sample- packager : holding the launcher for creating a T24 package that can be deployed to your sandbox. Make sure you check the secured box as in below picture: Make sure you save the change CTRL+S. Uncheck XML for Local Fields Go to ft-sample-models > click right and select Properties > expand Design Studio > click Code Generation > expand All Categories > Uncheck XML for Local Fields (LT/RTL) Click Apply and OK. Create New T24 Server in Design Studio Note Check first if you already have available the Servers tab. If not, follow below steps. A T24 Server is required in Design Studio to be able to import/export applications/enquiries/versions from/to your sandbox. Follow next steps to create and configure a T24 server: On servers tab, click right and select Add New T24 Server . A new screen is open. Type a name for the server(make sure it includes '-server' string) and click Next . Choose connection type as T24 Server-Web Service and click Finish . After the server is created, the server.properties must be updated according to your sandbox details: -> In T24 User (deployment only) section, 2 users that you use to connect to your T24 sandbox must be introduced. -> In WebService (TAFJ) Connection section, Secured box must be checked, Protocol must be set to ws value, Hostname must be set according to the hostname of your sandbox, Port must be set to 443 value and Context to axis2 value. -> To get the hostname of your sandbox, log-in to your organisation in TCD Portal (Temenos Continuous Deployment), go to your enviroment page and click on the GO TO Application Endpoint for the T24 application. The BrowserWeb page of your sandbox is opened and from the URL of this page, you must select the part between https:// and /BrowserWeb/servlet/BrowserServlet . Note For future use, in case T24 Server is not visible, go to: Window > Show View > Other : Type Server in the search bar and select Design Studio > Servers : Toggle Project to TAFJ project nature The Toggle TAFJ project nature action must be performed in order to be able to develop, compile and package jBC routines and to interrogate your sandbox database. Right click on data-code module and choose Toggle TAFJ project nature . In the next screen, tafj_properties from Your_DEV_Path/TAFJ/conf folder, choose TAFJ_HOME as Your_DEV_Path/TAFJ folder and click Next . In the bellow picture, DEV_Path is set to C:\\TemenosDEV. In the next screens, click Next and Finish . In the end, data-code module should be toggled. A .properties file was created for your project in Your_DEV_Path/TAFJ/conf folder. Note If TAFJ properties for your project must be updated, make sure you update the .properties related to your project from Your_DEV_Path/TAFJ/conf folder. jBC Routines Development Note In order to make sure your routine will be successfully created, it is important to have set correctly all the parameters when creating a new project. If necessary, check again this section . jBC routines are developed in the data-code module which must be toggled to TAFJ project nature by following next steps. In order to create a new jBC routine, expand data-code module, go to src->Source->Private, right click on project name (FT_Sample in the above picture), select New and then New T24 routine / component / testcase . On next screen, type the name of the routine and click Finish . The new routine is created. Create a T24 package based on your project In order to deploy your developed routines in the sandbox, a T24 package must be created. Go to packager module in Design Studio workspace, right click on Launch T24 Packager (TAFJ).launch and choose Run As > Launch T24 Packager (TAFJ) . Wait for successfull build for the project. Check where the package was generated. Import T24 Applications, Enquiries and Versions Note In order to import Applications/Enquiries/Versions from your sandbox to your local machine, make sure you have a T24-server created and configured in Design Studio. Hint: When importing artefacts from a T24 Environments on the project you need to disable the XText RIM in order to speed up the operation and install or after a T24 update/upgrade. Then Import T24 Core Models or if your DS version has the Import T24 Core Models with the process after T24 update/upgrade (this tool is also available in headless mode). Go to Servers tab, right click on your server state and change state to active . State should become active: Note The following example is about importing Enquiries from your sandbox to your local machine. The same steps can be aplied for Applications and Versions. After the T24-server is active, right click on the models module and choose Import : Expand Design Studio item, choose Import T24 Enquiries and click on Next button. (you have to wait until the list of enquiries is fetched from the sandbox database). Select from this list which enquiry you want to import from the sandbox to your local machine and click Next . Choose where to import the enquiry( Models folder from models module) and click Finish (wait until the operation is completed). A successful message will be displayed at the end and the enquiry will be saved in your local machine. Export T24 Applications, Enquiries and Versions Note The following example is about exporting Enquiries from your local machine to your sandbox. The same steps can be aplied for Applications and Versions. Note Make sure your T24 server is set to active . Right click on the models module and choose Design Studio -> Generate Code : A message should be displayed saying that the enquiry was successfully modified. Data (.d) files A data(.d) file represents a details viewer of a record from the database. A data file has 2 columns: -> first column contains the unique number of all table fields of the record; -> second column contains the values for all table fields of the record. Note Assuming that your date-code module is toggled to TAFJ project nature, make sure you update the .properties file related to your project from Your_DEV_Path/TAFJ/conf folder with the private database IP of your sandbox. Before starting to extract/load data files from/to your sandbox database, you must login to TAFJ-DBTools. -> Right click on your data-code module and select DBTools login . -> A wizard will appear in which you must type the DBTools credentials(which can be found in Add_DBTools_User.bat file from Your_DEV_Path) and click Finish . Extract data files from the database Expand data-code module, go to src, right click on Data and select Extract from the database . The bellow wizard will appear. Make sure the URL of the Database contains the correct database IP of your sandbox. Otherwise, you have update your .properties file related to your project from Your_DEV_Path/TAFJ/conf folder. Type the Table Name and Record ID and click Finish . Check the console log to see if the data files was extracted. Load data files in the database Right click on your data file and select Load in the database . The bellow wizard will appear and click Finish . Make sure the URL of the Database contains the correct database IP of your sandbox. Otherwise, you have update your .properties file related to your project from Your_DEV_Path/TAFJ/conf folder. A success message should be displayed in the console. For more tutorials on how Design Studio works, please check here."
  },
  "home/techguides/t24-development.html": {
    "href": "home/techguides/t24-development.html",
    "title": "Develop T24 Packages, Plugins and Code",
    "keywords": "Develop T24 Packages, Plugins and Code Deploy a T24 package to Sandbox Note Make sure you cloned in your local machine the GitLab repository of your sandbox. Copy the generated package into the packages folder of the cloned GitLab repository from your local machine: If the package is a new file in the repository, the package must be first added to the repository: A screen will appear saying that the file was added. Press Commit : A new screen will appear. Insert a comment in the upper window and then choose Commit . A new screen will appear and choose Push . A new screen will appear and choose OK . A success message should be displayed. Press Close . Trigger the deployment After commiting and pushing to Environment Repository all the features, you have to deploy them in your Environment. Login to your organisation, select your environment, locate the Repository Application and click the Deploy button. For more details about the deployment, check the following steps . Check jBC routines deployment to Sandbox Log-in to your organisation into the Temenos Continuos Deployment Platform, go to your enviroment page and click on the Monitor Application Endpoint for the T24 application. The TAFJEE page is opened. Click tShow to check if your developed routines were deployed in your sandbox. Details like the compilation date or the jar that contains the class of those routines can be checked. In the next screen, input your routine name and click Submit . In the next screen, the details of your routine can be seen. More about the pre-requisites, import / export T24 applications can be found here . User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT REDEPLOY _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/templates-list.html": {
    "href": "home/techguides/templates-list.html",
    "title": "Templates List",
    "keywords": "Templates List Below you can find the current templates catalogue: T24 TSS Name Version Description Release Notes MB-T24-Jboss-SQL-202002 202002 TSS-R19Template for Stack06 - 202002 MB-T24-Jboss-SQL-202001 202001 TSS-R19Template for Stack06 - 202001 MB-T24-Jboss-SQL-201912 201912 TSS-R19Template for Stack06 - 201912 MB-T24-Jboss-SQL-201912 201912 TSS-R19Template for Stack06 - 201912 MB-T24-Jboss-SQL-201911 201911 TSS-R19Template for Stack06 - 201911 MB-T24-Jboss-SQL-201704 201704 TSS-Template for Stack06 OSS Name Version Description Release Notes T24 R20.02 (Open Source) 202002 T24 R20.02 (Open Source) MB-T24-Wildfly-H2-201912 201912 T24 R19.12 (Open Source) ModelBank-T24-Wildfly-H2-R19.08-Assemble 201908 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R19.08 for Assemble ModelBank-T24-Wildfly-H2-R19.07-Assemble 201907 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R19.07 for Assemble ModelBank-T24-Wildfly-H2-R19 201904 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R19 AMR with UXP Browser and Retail ModelBank-T24-Wildfly-H2-R19-NoUXP 201904 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R19 AMR ModelBank-T24-Wildfly-H2-R19-Assemble 201904 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R19 for Assemble MB-Wildfly-T24-H2-201904 201904 This is template for T24 with Widfly and H2 ModelBank-T24-Wildfly-H2-R19.02 201902 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201902 ModelBank-T24-Wildfly-H2-R19.01 201901 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201901 ModelBank-T24-Wildfly-H2-R18.11 201811 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201811 ModelBank-T24-Wildfly-H2-R18.10 201810 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201810 ModelBank-T24-Wildfly-H2-R18.08 201808 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201808 ModelBank-T24-Wildfly-H2-R18.06 201806 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201806 ModelBank-T24-Websphere-R18 201804 ModalBank T24 with Websphere, Oracle 12c as database and client repository, release R18 ModelBank-T24-Wildfly-H2-R18 201804 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R18 ModelBank-T24-Wildfly-H2-R18-Assemble 201804 ModelBank T24 with Wildfly 7, H2 as database, Design Studio Kit and client repository, release R18 for Assemble ModelBank-T24-Wildfly-H2-R18.03 201803 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201803 ModelBank-T24-Wildfly-H2-R18.02 201802 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201802 ModelBank-T24-Wildfly-H2-R18.01 201801 ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201801 ModelBank-T24-Wildfly-R18 R18 ModelBank T24 with Wildfly7, Oracle 12c as database and client repository, release R18 USModelBank-T24-Wildfly-H2-R17 USMB US ModelBank T24 with Wildfly 7, H2 as database and client repository, release 201903 HostedSaaS Name Version Description Release Notes ModelBank-T24-Jboss-H2-R17.12 201712 ModelBank T24 with Jboss 6, H2 as database and client repository, release 201712 ModelBank-T24-Jboss-H2-R17.11 201711 ModelBank T24 with Jboss 6, H2 as database and client repository, release 201711 ModelBank-T24-Jboss-H2-R17.10 201710 ModelBank T24 with Jboss 6, H2 as database and client repository, release 201710 ModelBank-T24-Jboss-H2-R17 17 ModelBank T24 with Jboss 6, H2 as database and client repository, release R17 ModelBank-T24-Jboss-H2-R16.03 201603 ModelBank T24 with Jboss 6, H2 as database and client repository, release 201603 FCM Name Version Description Release Notes MB-FCM-ONLY-Jboss-SQL-202001 202001 FCM Standalone for 202001 ModelBank-FCM-6 master FCM version 6 FCM + T24 Stack09 (Post R20) Name Version Description Release Notes MB-US-FCMT24-Jboss-SQL-201912 201912 ModelBank US FCM T24 SQL 201912 (Jboss and MSSQL) MB-GEN-FCMT24-Jboss-SQL-201912 201912 MB GEN FCM T24 201912 (Jboss and SQL) MB-FCMT24-Jboss-SQL-201911 201911 FCM-R19Template for Stack06 - 201911 Wealthsuite Name Version Description Release Notes MB-TAPWeb-Only-OpenLiberty-Sybase-201912 201912 WealthSuite ModelBank 201912 - (Front Office only) MB-TAPT24-OpenLiberty-Sybase-201912 201912 WealthSuite ModelBank 201912 MB-TAPWeb-Only-OpenLiberty-Sybase-201911 201911 WealthSuite ModelBank 201911 - (Front Office only) MB-TAPT24-OpenLiberty-Sybase-201911 201911 WealthSuite ModelBank 201911 WealthSuite-T24-TAP-R18 master WealthSuite and T24 ModelBank with Wildfly, Oracle as database and client repository, release R18 ABN-TAP-Sybase-R16 201603 ABN TAP with Sybase as database and client repository, release R16 TestTools Name Version Description Release Notes TestClient-HP-UFT-ATAF 14.03 HP UFT with ATAF parallel tests TestClient-HPUFT-14.0.0.3 14.03 Test Client HP UFT version 14.0.0.3 on Windows Server"
  },
  "home/techguides/triage-workflow.html": {
    "href": "home/techguides/triage-workflow.html",
    "title": "Triage Workflow - Check Errors when Test Fails",
    "keywords": "Triage Workflow - Check Errors when Test Fails In case the factory test fails, see below how to check the errors. See an example of what are the messages displayed on the screen after the factory run (process) has been completed, but the tests failed: View Event History - You can see the phases during the factory run including the failed test run. On the timeline you will see: the process completed a red warning message \"RESULTS - FAILED\" with the test location in your artifactory. Check Test Results By clicking the Download button, you can have locally a zip file which contains an index.html file having the same information as View Results . View results displays an HTML report with the list of all errors encountered during the test run. Check Application Logs By clicking the Download button, you can have locally a zip file which contains the following folders: jboss t24home TAFJ Note Into t24home you can find T24.log referring to the T24 BrowserWeb processes, where you can identify the exact errors during the test run. Also please check this user guide in order to see how you can access the UD directories."
  },
  "home/techguides/troubleshooting.html": {
    "href": "home/techguides/troubleshooting.html",
    "title": "Introduction",
    "keywords": "Introduction This user guide shows different ways of accessing details related to your development environment when deploying the following: Design Studio Packages Plugins Updates WAR files 1. Export Environment Details The Export Environment Details functionality gives you access to different information related to your sandbox like: -> the T24 UD (default) folder from your T24 sandbox -> the jars deployed in your T24 sandbox -> the war files deployed(with success or not) in your T24 sandbox -> the jboss server.log from your T24 sandbox. The environment details are exported in a SFTP server to which you have to connect in order to download the related files in your local machine. For this purpose, make sure you download and install WinSCP SFTP client. The Export Environment Details functionality can be triggered from PaaS Portal following the bellow steps: Log-in to your organisation in PaaS Portal, go to your enviroment page and click on the Export Environment button for the T24 application. After click, the Export Environment button will become disabled(as per bellow picture), meaning that the export was triggered. Note The Export Environment action is finished when the Export Environment button becomes enabled. In order to download the exported files of your environment from the SFTP server to your local machine: In PaaS Portal for your organisation, go to your environment page and Right click and copy the sftp.temenos.cloud Endpoint or click the copy to clipboard icon from the right: Open WinSCP SFTP client and create a new site that will allow you to connect to the SFTP server. Make sure you put tcdSFTP.temenos.cloud Endpoint as Host name, your PaaS user as User name and instead of password, the SSH key related to your PaaS user must be used. In order to attach the SSH key, press Advanced button, go to Authentification menu and select the private key related to your PaaS user. After attaching your SSH key, save your site with any name for future use. Click Login to connect to the SFTP server. If connection is successful, you will have 2 sections in WinSCP: -> the left section(highlighted in black) represents the location from your local machine where the environment details will be downloaded. -> the right section(highlighted in yellow) represents the location of the exported environment details in the SFTP server; the environment details are saved in the SFTP server in /organisationID/environmentID folder structure. Go inside your environmentID folder and you will see a zip file that contains the Environment Details. In order to download the zip, select it and press F5. After downloading the zip file to your local machine, unzip it. Based on the template used, you will be able to see the below scenarios: a) For Extend-Templates - once you downloaded the file and unzipped it on your local machine, the below folders will appear b) For Wildfly, Stack01 and Stack02 Templates - once you downloaded the file and unzipped it on your local machine, the below folders will appear: Based on the above folder structure, you can check the following: -> If you deployed any update in your sandbox, check if jar/jars related to the update are changed in the jar list from modules/com/temenos/t24/main folder. -> If you deployed any package in your sandbox, check if the jar related to the package is present in modules/com/temenos/t24/main/localjars folder. -> If you deployed any war file in your sandbox, check if the war was deployed with success(a file named war_name.deployed should be present in standalone\\deployments folder). The war deployment will be failed if a file named war_name.failed is present in standalone\\deployments folder and this file must be checked for details. > [!Note] > For Stack02 Template in the 'appserver' folder you will find 'installed apps' folder instead of 'deployments'. 2. TAFJEE Monitoring Tool TAFJEE Monitoring Tool can be used in the following situations: -> To get the TAFJ installation details from your Environment (using tDiag Servlet) -> To get the compilation details for a T24 routine from your Environment (using tShow Servlet) -> To access various logs from your Environment like Database log or Runtime log (using Logger Servlet) -> To access como content from your Environment (using Como Servlet) -> To execute DBTools commands (using DBTools Servlet). To access the TAFJE Monitoring Tool for your Environment, log-in to your organisation in PaaS Portal, go to your enviroment page and click on the MONITOR APPLICATION Endpoint for the T24 application. The bellow page is opened from which various servlets can be accessed. TAFJ Environment Information To view various information about the TAFJ Environment from your Environment, access the TAFJ Monitoring Tool of your Environment from PaaS Portal and select tDiag option from the Diagnostic section. The next page is opened in which information like TAFJ installation details, Environment details, TAFJ Runtime properties, T24 Monitoring properties and TAFJ Session Monitor properties can be found. T24 Routine Information To view the compilation details for a T24 Routine from your Environment, access the TAFJ Monitoring Tool of your Environment from PaaS Portal and select tShow option from the Diagnostic section. The next page is opened in which you must enter the name of the T24 Routine. Click Submit to get the compilation details. The details like compilation date or the .jar file that contains the class of the T24 Routine are displayed. Logs Information To view different log files from your Environment (Database log/Runtime log), go to the TAFJ Monitoring Tool of your Environment from PaaS Portal and select Log files option from the Troubleshooting section. The next page is opened in which you can select any log from the list and change dynamically the log level (6 log levels are available: FATAL, ERROR, WARN, INFO, DEBUG, TRACE). For example, to view the Database log for a specific level, go to the Database log part of the page, choose the appropriate level and click View . The Database log information for the selected level is displayed. Note To change the log level for a specific logger, select from the Level Filter combo box the appropriate level and the page will be refreshed automatically based on the selected level. Como Information The TAFJ Monitoring Tool offers the possibility of viewing the log files generated when running different tSAs(Temenos Service Agents) or when installing T24 packages or T24 updates in your Environment. This is achieved with the aid of the Como servlet which provides direct access to the &COMO& folder content from your Environment. To view the Como content, go to the TAFJ Monitoring Tool of your Environment from the Development platform portal and select Como files option from the Troubleshooting section. The next page is opened in which you can select for which Como log do you want to View the details. In the bellow example, the Como log generated for installing a T24 package is displayed. Note Please note that you will get a picture of the &COMO& folder from your Environment at a point of time only and that there is no automatic refresh functionality. Thus, you must use the Refresh button to get latest state of Como logs. DBTools Information To interogate the Environment Database from TAFJEE tool with DBTools commands, go to the TAFJ Monitoring Tool of your Environment from Development platform portal and select DBTools option from the Execution section. A pop-up will appear in which JBOSS credentials must be introduce because the DBTools application can be accessed by authenticated users only. Note In case you do not have the required JBOSS/DBTools credentials, please contact MarketPlace team at marketplace-support@temenos.com. The next wizard will appear in which you can execute any DBTools command by following the next steps: -> Enter the DBTools user credentials in the Authentication section. -> In the Command section, select the command type from the Mode combo box, enter the command in the Argument field and optionally you can enter a name in the Log file name field. -> Click the Execute command button to execute the command and a message will be displayed in the page. -> Depending on the command, an output will be generated and it will be available in the output list after pressing the Refresh button. For example, a JQL command is entered. After clicking the Execute command button, a message is displayed. Click the Refresh logs button and in the Output section, a log(containing the result of the DBTools command) will be displayed. Click the View button related to the generated log to view the result of the DBTools command. 3. Import Data Eson instead of .d record - Fix \"sslHandshageException\" error While importing the data eson files, but also while importing the Enquiry, versions, etc. an error related to sslHandshageException may appear. To solve this error, follow below instructions: Add the certification to the cacerts of the jre inside DS tool by following below steps: Download the certification: open in your browser, for example Chrome, the T24 BrowserWeb click on \"Secure\" > Certificate > Details > Copy to File > Next > select Base-64 encoded X.509 (.CER) and click Next save the certification of the T24 area (example: we are saving it with the name **sharedSandboxCert.cer ) Close DS tool Copy the certification into <DS_path>\\jdk\\jre\\lib\\security location Go to <DS_path>\\jdk\\jre\\bin and, from a cmd window, run below command: keytool -keystore ../lib/security/cacerts -importcert -alias sharedSandbox -file ../lib/security/sharedSandboxCert.cer Start DS and try again to import the files - How to import data.eson instead of .d files Start the t24 server Right click on <projectName>-data-code Select Import > DesignStudio > Import T24 data Select the folder where you want the record to be added (usually it is added inside <projectName>-data-code > src > data > Model or <projectName>-data-code > src > data > Public location depending on the type of the record ) Select the Application, meaning the table name from T24 (example: CURRENCY) Type the Record Id (example: USD) Click on finish button You should obtain a record with the name like: GB0010001.CURRENCY!EUR.data.eson Note In order to ensure that the data.eson records will be added to the package while building it please do below steps: Open the pom.xml file from the <projectName>-packager Search for the line that is starting with <componentName> Under that line please add this line: <packageEsonAsCsv>true</packageEsonAsCsv> Save the file"
  },
  "home/techguides/user-creation-in-paas.html": {
    "href": "home/techguides/user-creation-in-paas.html",
    "title": "Introduction",
    "keywords": "Introduction This document can be used by technical staff who need to create Users on the Temenos Continuous Deployment Platform and associate to each user a ssh key. How to create Users The Administrator can navigate to the Users section on the portal, create more users and invite them to access and use the portal using the URL link. In this way the administrator is in control of who receives the URL link and which users can access the Organisation. The users can access their organisation only, view their user profiles and change their password. Note that only the users with the 'Amin' permission can create more users. To create a new user, please refer to the below: • Login to your organisation portal using the link and the credentials provided. • Go to the menu on the left and then click Users tab, as below: The first screen that you will see is the one for the existing user (usually admin). Click New user button on the top-right corner: This will create a new user in your organisation. This new user will be automatically assigned to all GitLab Repositories from within all environments. If you have already a user created, you can click on the user and update the SSH key box with the one created above. User Roles Management By default, when your organisation is created, Temenos will provide you the link and access instructions to your designated organisation administrator (the first and only user with full rights on the platform). The administrator can create more users and navigate to the Roles section on the portal to assign various permissions to each user. To create a role, the admin will click on 'New Role' and fill in the blanks: The admin can select which permissions to set to each user. Once the role is created, the admin can assign it to a specific user: go to the 'Users' tab and select the user choose from the drop-down list the user click 'Edit' on the user choose from the drop-down list the role that needs to be assigned To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions. How to use PuTTY SSH client for SSH key generation. Should the users requires access to the source code repository they need to provide their public SSH Keys on the user profile section to gain access. https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ ) You can use any other SSH key generator client. Note If you already have installed a SSH key generator client, you can skip this step. • Download the installer from http://www.putty.org/ • Run the installer and click Next on each screen, without changing anything in configurations. Click Finish once completed. How to create the SSH keys (pair public and private keys) • Open PuTTYgen and click Generate button: • This creates a new SSH key by moving the mouse in the blank area (highlighted in red), as per bellow picture. • After PuTTYgen has finished the key generation, you can save your public key/private key in any location from your local machine. Note In order to have a valid SSH key that can be recognized by Infrastructure, do not use the Save public key button from PuTTygen and just select the whole public key from the PuTTYgen screen and save it in your local machine. • From the PuTTYgen screen you must also save the private key. Press the Save private key button, choose 'Yes' on the next prompt (save the key without a passphrase to protect it) and indicate a name and location for the private key. • The public/private key location on your local machine should look like this: How to add users on the portal with the SSH keys Note All fields are mandatory! See further below how to generate the SSH key • Public SSH key needs to be pasted in SSH Key text box. Open Windows Explorer and locate your public key generated using PuTTY Key Generator. • Right click and open it with notepad. Select all and copy to clipboard. • Paste the copied text into the SSH Key text box and click Create user button. Your user is now available in the user list: You have the option to edit or to delete it. Note Once created, you cannot change the name and the email address, nor the user's password. You can only update (or add) the SSH key through edit button. Your username will be created in Gitlab server and public SSH key provided will be added to your account being accessible from all the environments created in your organisation. For further details or issues related to Gitlab SSH keys usage, or other operating systems (MAC, Linux), please consult this link: [https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/]( User Permissions Required To be able to create a user the below permission needs to be enabled for your user: CREATE _ USER"
  },
  "home/techguides/user-permissions.html": {
    "href": "home/techguides/user-permissions.html",
    "title": "User permissions overview",
    "keywords": "User permissions overview This page provides an overview of the permissions that an administrator can assign to a user. PERMISSION Description MANAGE_STREAMS Enables user to view the Streams for an organisation CREATE_STREAM Enables user to create a Stream for an organisation UPDATE_STREAM Enables user to update a Stream for an organisation DELETE_STREAM Enables user to delete a Stream for an organisation MANAGE_STAGES Enables user to view the Stages for an organisation CREATE_STAGE Enables user to create a Stage for an organisation UPDATE_STAGE Enables user to update a Stage for an organisation DELETE_STAGE Enables user to delete a Stage for an organisation MANAGE_PRODUCTS Enables user to view Products for an organisation CREATE_PRODUCT Enables user to create a Product for an organisation UPDATE_PRODUCT Enables user to update a Product for an organisation DELETE_PRODUCT Enables user to delete a Product for an organisation MANAGE_FACTORIES Enables user to view the Factories page, also user can change the Factorys status for an organisation CREATE_FACTORY Enables user to create a Factory for an organisation UPDATE_FACTORY Enables user to update a Factory for an organisation UPDATE_FACTORY Enables user to update a Factory for an organisation MANAGE_ENVIRONMENTS Enables user to view the Environments for an organisation CREATE_ENVIRONMENT Enables user to create a Environment for an organisation UPDATE_ENVIRONMENT Enables user to update a Environment for an organisation DELETE_ENVIRONMENT Enables user to delete a Environment for an organisation MANAGE_USERS Enables user to view the Users for an organisation CREATE_USER Enables user to create a User for an organisation UPDATE_USER Enables user to update a User for an organisation DELETE_USER Enables user to delete a User for an organisation MANAGE_ROLES Enables user to view the Roles for an organisation CREATE_ROLE Enables user to create a Role for an organisation UPDATE_ROLE Enables user to update a Role for an organisation DELETE_ROLE Enables user to delete a Role for an organisation ASSIGN_ROLE Enables user to assign a Role to other users BOOST_ENVIRONMENT Enables user to Boost an Environment REDEPLOY_ENVIRONMENT Enables user to Redeploy an Envionment START_ENVIRONMENT Enables user to Start an Environment STOP_ENVIRONMENT Enables user to Stop an Environment SCHEDULE_FACTORY Enables user to schedule a Factory for an organisation START_FACTORY_RUN Enables user to Start a Factory Run ABORT_FACTORY_RUN Enables user to Abort a Factory Run VIEW_FACTORY_RUN_HISTORY Enables user to View Factory Run History ALLOW_CUSTOM_TEMPLATES Enables user to create or customize Templates for an organisation ALLOW_EXPORT_ENVIRONMENT Enables user to export Environments for an organisation MANAGE_ORG_METADATA Enables user to manage metadata for an organisation CREATE_ORG_METADATA Enables user to create metadata for an organisation UPDATE_ORG_METADATA Enables user to update metadata for an organisation DELETE_ORG_METADATA Enables user to delete Metadata for an organisation MANAGE_USER_METADATA Permission to manage metadata for a user CREATE_USER_METADATA Enables user to create User Metadata UPDATE_USER_METADATA Enables user to update User Metadata DELETE_USER_METADATA Enables user to delete User Metdata CLONE_STREAM Enables user to clone a stream CREATE_COMPONENT Enables user to create component DELETE_COMPONENT Enables user to delete component MANAGE_COMPONENTS Enables user to manage a component START_ALL_ENVIRONMENT Enables user to start all environments STOP_ALL_ENVIRONMENT Enables user to stop all environments SCHEDULE_ENVIRONMENT Enables user to schedule environment start or stop"
  },
  "home/architecture.html": {
    "href": "home/architecture.html",
    "title": "Architecture Overview",
    "keywords": "Architecture Overview Where does Temenos Continuous Deployment Platform fit into the enterprise IT landscape? The Temenos Continuous Deployment Platform (TCD) promotes the concept of simplified and standardised change promotion through the IT landscape. Typical organisations have a number of non-production (i.e. development/test) environments, where changes are implemented and checked prior to deployment to production systems. The Devops movement seeks to improve this QA process through means of automation, which both allows an increase in speed in change promotion, and a reduction in the risk of manual errors when promoting changes. The Development Platform includes a simple and repeatable method of collating changes (both configuration and customisation) which subsequently is simple to promote from environment to environment. In addition, the core function of the Deployment Platform is to simplify the environment provisioning process, which means if extra stages in the change flow are required (e.g. for additional testing phases), it becomes far simpler to spin up temporary environments for these purposes. It should be noted that the Development platfrom only supplies non-production environments (also known as 'sandboxes'), which means organisations will still require at least one non-production environment on representative hardware in order to sanity check changes prior to production release (see example below). Delegating platform and infrastructure responsibilities to a third party allows organisations to concentrate on what is important to them - applications and data. The Deployment platform may be used for simple environment provisioning, or may be augmented by additional tools (such as Continuous Integration tooling) to provide a streamlined and automated development experience. The change promotion mechansim within the TCD is simple to plug into standard CI tooling to push code/config/data from environment to environment. An example development flow is shown below: What are the components of Temenos Continuous Deployment? Development & Testing environments are managed by the Development Portal, and are comprised of distinct components as described below: Component Description Portal The Portal is the front-end component of the Deployment Platform which allows users to perform management functions across development environments. These functions include user management and environment provisioning/scaling. Configuration Repository The Configuration Repository is the 'change hub' for the Deployment Platform. It supports configuration and customisation (per environment), including T24 updates, custom config/code packages, database imports and third party plug-ins/add-ons. T24 Instance The T24 instance comprises the application and database for T24. The application tier may be scaled horizontally as required (via the management facility in the Portal). Exports (File Storage) The T24 database may be exported via the management facility in the Portal, as may the 'environment' (file system level). These exports are stored per environment and may be downloaded by users via SFTP. What can you do with Temenos Continuous Deployment? Below is a list of functions which can be performed using Temenos Continuous Deployment. Function Description Provision a new environment Create an environment Scale an environment Scale a environment horizontally by adding/removing additional T24 instances for a given database instance Delete a environment Delete a environment Manage a user Create/ edit/ delete a user Apply configuration/ customisation Apply the necessary change components to create a customised environment configuration for an organisation Login to T24 Use the resultant customised environment Import a database Import a database into a environment Export a database Export a database from a environment (e.g. to re-import into another environment) Export an environment Export a copy of a environment (file system level) for offline perusal What tools do I need to use Temenos Continuous Deployment? Below is a list of tools which may be used to exploit Temenos Continuous Deployment functionality. Tool Description and Rationale Git Git (/ɡɪt/) is a version control system for tracking changes in computer files and coordinating work on those files among multiple people. A client program for Git is required to push artefacts into the configuration repository. SFTP Client SFTP is the protocol used to download file exports (environment or database exports) Continuous Integration Tool (Optional) Continuous Integration tools may be used to help automate change promotion between environments. There is no CI tool provided as part of the Temenos Continuous Deployment, but these are useful in reducing manual tasks when managing environments. Design Studio (Optional) Design Studio is the IDE (Integrated Development Environment) produced by Temenos for developing changes in T24 systems. Design Studio itself does not form part of the Deployment Platform, but change outputs from this tool are supported within the Configuration Repository. Enterprise View This section provides an overview of what the TCD solution is, and how it fits in with the wider Temenos and bank enterprise. Enterprise View The TCD solution is composed of the Extend and Assemble modules to enable the provision of development and Integration test environments. The current state allows for these two modules only. Roadmap features envisage a Deliver module to cover pre-production and production environments. The TCD Extend module is a multi-tenanted provisioning and deployment module that provides Users and/or other systems with self-service management of Environments and provides access to the tools for enhancing Client Licensed Temenos Software. The Extend module enables authorised Users to provision Environments from a list of Templates for non-production use during development, test, integration, implementation and ongoing changes to the Products. The Extend module is a cloud-hosted platform service and manages Environments in either the Temenos cloud or a Client’s Target Cloud account. Each Environment is a standalone instance of one or more Products or approved third-party applications / products running on the middleware defined in the Template. Each Factory is formed of an Environment and one or more Test Clients. The Test Clients have their own Templates, which define their infrastructure, software Components and configuration. The TCD Assemble module performs the test pipeline automation, continuous integration (“CI”) and continuous delivery (“CD”) of Client’s changes to Client’s Licensed Temenos Software. The Assemble Module utilises the same technologies as the Extend module, and does: deploy Test Clients; execute the Clients’ tests; orchestrate the deployment of Environments with Factories and the promotion of Packages through a workflow; manage storage of test results and application logs; manage the lifecycle of test Environments; provide a dashboard of test results with links to the underlying manifests, templates and, where appropriate, running Environments. The TCD test result dashboard is a multi-tenanted web application hosted and operated by Temenos. The dashboard shows historic test results for a Factory within a configured Release and trends through a web UI pulling data from the Assemble Modules local database and test results and application logs in Target Cloud storage. The TCD Artefact Repository is a third-party artefact repository “Artifactory by Jfrog” . The repository holds all the built software Components that are referenced by the Templates at the relevant test and deploy Stages. The Client will push all of its Product packages to the Artefact Repository"
  },
  "home/assemble.html": {
    "href": "home/assemble.html",
    "title": "Environments include:",
    "keywords": "Assemble your configuration and local developments, with published versions of Temenos software and run through automated regression testing. Triage results for continuous development Bring together configuration and local developments, with published versions of Temenos software and run through automated regression testing. Triage results for continuous development. Environments include: Test Triage Development Functionalities include: Automated deployment of test environments Automated execution of test cycles Continuous integration of customer change and promotion (L1-L2-L3) Management of promotional workflow Assemble Proposition: Extend gives you the ability to leverage the extensive list of published Temenos APIs to integrated to other systems, make commercially differentiating system extensions and engage in the Fintech ecosystem. Extend module provides you access to cloud based, self-provisioned, self-managed environments populated with configurable and scalable Temenos software. Test your proof of concept, share development environments across dispersed teams, replicate production environments or use them for training. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity. Extend is designed and built for specific needs of the banking and financial service industry, and comes with the full support of the Temenos SaaS team, whether or not you use the Temenos SaaS or a self-provided cloud subscription."
  },
  "home/clone-environment-video.html": {
    "href": "home/clone-environment-video.html",
    "title": "",
    "keywords": "Total video time : 3:32 minutes Total demo time : ~ 20 minutes (from which 15 minutes the cloning of the environment) INFO : All the changes present on an environment are copied to a new identical environment through the cloning function The environment must NOT be in one of the statuses: Stopping, Rebuilding, Scaling, Exporting or if it has a Warning The cloning may take around 15 minutes ."
  },
  "home/deploy-an-update-to-an-existing-environment-video.html": {
    "href": "home/deploy-an-update-to-an-existing-environment-video.html",
    "title": "",
    "keywords": "Total video time : 20:59 minutes Total demo time : ~ 35 minutes (from which 15 minutes the creation of the environment) INFO : Add a user on the portal and attach the public SSH key Clone an environment in order create a local repository Add files or packages to each related folder: addons, packages, plugins, updates, wsdls and client files Commit and push all elements to the environment repository Deploy the elements by clicking the deploy button under the repository belonging to the environment."
  },
  "home/export-import-database-video.html": {
    "href": "home/export-import-database-video.html",
    "title": "",
    "keywords": "Total video time : 14:22 minutes Total demo time : ~ 40 minutes (from which ~ 15 minutes the creation of the environment) INFO : Create two environments . Add a user on the portal and attach to it the public SSH key . Login to T24 from \"source\" environment and change a record in the database. Export the database of the source environment. Connect to SFTP server via WinSCP client using the user and the SFTP endpoint from the portal. Download the DB to the local machine. Clone the target environment. Push the database to the new (target) environment. Deploy the database to the target repository. Check the successful import of the database > Verify the changed record in T24."
  },
  "home/extend.html": {
    "href": "home/extend.html",
    "title": "Environments include:",
    "keywords": "Extend your Temenos software functionality through self-service environments with Temenos product templates. Extend to allow for developers to create features and continuously improve and build business features. Environments include: Development Test Functionality includes: Custom API Temenos product templates Self-service Continuous integration and development Build services Import selected 3rd party solution Extend Proposition: The Extend module gives you the ability to leverage the extensive list of published Temenos APIs to integrated to other systems, make commercially differentiating system extensions and engage in the Fintech ecosystem. Extend provides you access to cloud based, self-provisioned, self-managed environments populated with configurable and scalable Temenos software. Test your proof of concept, share development environments across dispersed teams, replicate production environments or use them for training. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity. Extend is designed and built for specific needs of the banking and financial service industry, and comes with the full support of the Temenos SaaS team, whether or not you use the Temenos SaaS or a self-provided cloud subscription."
  },
  "home/fcm-configuration-video.html": {
    "href": "home/fcm-configuration-video.html",
    "title": "",
    "keywords": "Total video time : 10:10 minutes Total demo time : ~ 25 minutes (from which ~ 15 minutes the creation of the environment) INFO : Create new environment using FCM template Check the endpoints : Financial Crime Mitigation and Interfaces Module Create a user on the portal and attach the public SSH key Connect to SFTP server with WinSCP client Drag a message to be processed into the appropriate folder Check Transaction Alert Manager from FCM application."
  },
  "home/index.html": {
    "href": "home/index.html",
    "title": "-----------------------------------------------",
    "keywords": "-----------------------------------------------"
  },
  "home/jenkins-build-video.html": {
    "href": "home/jenkins-build-video.html",
    "title": "",
    "keywords": "Total video time : 22:51 minutes Total demo time : ~ 30 minutes (from which ~ 15 minutes the creation of the environments > creation of the environments can be simultaneous ) INFO : Create new environments : Build environment Source environment Target environment Login to Jenkins and change the password Generate and save two pairs of public and private SSH keys Create two users on the portal and attach the public SSH keys Add the two users on the GitLab and attach the related private SSH keys Add credentials in Jenkins dashboard Configure the Pipeline Build Click Pipeline > Build Click Pipeline Promote Changes > Build."
  },
  "home/manage-components-products-video.html": {
    "href": "home/manage-components-products-video.html",
    "title": "",
    "keywords": "Total video time : 11:21 minutes INFO : Click on the New Component and select the Component Type Input a name Fill in the description Fill the display name Click create."
  },
  "home/manage-environments.html": {
    "href": "home/manage-environments.html",
    "title": "Manage Environments",
    "keywords": "Manage Environments Organisation ID The Temenos Development Platform support multitenancy and Organisations are designed to be distinctive accounts. Upon subscription you'll receive a unique Organisation Id as a URL link. Your Organisation Id will look similar to this: The confirmation of your Organisation activation will contain the link and access instructions to your designated Organisation administrator. The administrator is the first and only user. Environments The Development platform (Extend) has the capability to provision environments in a variety of different configurations. Users can initiate a new environment and select from a predefined list of templates the application, the release and stack they wish to provision. Each month we host a new template with the latest release of Temenos suite. The environments are customisable in terms of Name and brief description to explain their purpose. The templates follow the official Temenos configuration stack but they can be customised for Releases 2016 onwards. Create your own environment: Either click the Environments tab on the left menu and then click New Environment button on the top right corner. Or you can already see the environment page open with the fields available to create a new environment. Fill Name and Description fields Select one of the available templates from dropdown list, based on your requirements Click Create environment All fields are mandatory except 'Labels'. Note The environment creation may take around 20 minutes or more, depending on the selected template. Templates Check the list with all available templates. Click the Templates Catalog on the left menu. Currently, the screen that opens will display an FCM and T24 default template. Click on the Template Type and select for one of the applications, for example T24 to see the latest retail Suites versions and other available templates."
  },
  "home/manage-streams-video.html": {
    "href": "home/manage-streams-video.html",
    "title": "",
    "keywords": "Total video time : 5:30 minutes INFO : Click on New Stream on the top right Fill in the Name Fill in the Description Click the Enable option Click Create ."
  },
  "home/manage-testcases-video.html": {
    "href": "home/manage-testcases-video.html",
    "title": "",
    "keywords": "Total video time : 2:14 minutes INFO : Click on the New Component and Click on the Test Cases folder Click on the Deploy button Fill the required field Choose a meaningful name for your factory Choose Single or Multi based on number of zip folders that you need to upload and drop or select the test cases zip file Click on the Deploy button To delete the uploaded test cases click on testcases.zip file, then on the Actions button (under Deploy) and Delete."
  },
  "home/support.html": {
    "href": "home/support.html",
    "title": "Getting Support",
    "keywords": "Getting Support Temenos application support should be logged through the Temenos Customer Support Portal . Please contact your local account manager for all sales and non-support related queries."
  },
  "home/tcd-hosting-options.html": {
    "href": "home/tcd-hosting-options.html",
    "title": "Temenos Continuous Deployment Hosting Option",
    "keywords": "Temenos Continuous Deployment Hosting Option The Temenos Continuous Deployment platform has two distinct deployment domains as below: the “Platform Cloud” where the provisioning software runs; the “Target Cloud” where the T24 environments are provisioned. There are a number of options: 1. All hosted on Temenos SaaS - this is Azure; 2. The Platform component is hosted on Temenos SaaS. The Target Cloud is a bank’s public cloud - the hybrid model (target cloud is an Azure subscription owned by the bank); 3. All hosted on the bank’s cloud - all hosted on the bank’s AWS account. The advantages of the various offerings: a) Temenos hosted - this is a full-service SaaS offering with Support desk, monitoring, SLAs. The bank benefits from the regular rollout of new features. There are no technical pre-requisites to use the service. A service/hosting agreement is required with Temenos SaaS. b) The bank runs it all on their public cloud (AWS or Azure) - there is no service element to this; the bank has full responsibility for installing and operating the platform. There are two primary service models depending on whether the client is using Temenos SaaS for both the service, and the Target Cloud; or using their own cloud environment for the Target Cloud."
  },
  "home/techguides/create-user-role.html": {
    "href": "home/techguides/create-user-role.html",
    "title": "User Roles Management",
    "keywords": "User Roles Management By default, when your organisation is created, Temenos will provide you the link and access instructions to your designated organisation administrator (the first and only user with full rights on the platform). The administrator can create more users and navigate to the Roles section on the portal to assign various permissions to each user. To create a role, the admin will click on 'New Role' and fill in the blanks: From this window the admin can select which permissions to enable to each user. Once the role is created, the admin can assign it to a specific user: go to the 'Users' tab and select the user choose from the drop-down list the user click 'Edit' on the user choose from the drop-down list the role that needs to be assigned Please find below a set of recommended user roles for your organisation: Administrator Scope: the user has full overview over the organisation's capabilities and users (can create users and assign different roles) Set permissions: select all permissions Developer Scope: the user can create/ run environments/ factories etc. The Developer does not need the metadata or visibility on the users. Set permissions (you can customize them at your convenience): ABORT_FACTORY_RUN, ALLOW_CUSTOM_TEMPLATES, ALLOW_EXPORT_ENVIRONMENT, ASSIGN_ROLE, BOOST_ENVIRONMENT, CLONE_STREAM, CREATE_COMPONENT, CREATE_ENVIRONMENT, CREATE_FACTORY, CREATE_ORG_METADATA, CREATE_PRODUCT, CREATE_ROLE, CREATE_STAGE, CREATE_STREAM, CREATE_USER, CREATE_USER_METADATA, DELETE_COMPONENT, DELETE_ENVIRONMENT, DELETE_STAGE, DELETE_STREAM, DELETE_USER_METADATA, MANAGE_COMPONENTS, MANAGE_PRODUCTS, MANAGE_ROLES, MANAGE_STAGES, MANAGE_STREAMS, REDEPLOY_ENVIRONMENT, SCHEDULE_ENVIRONMENT, SCHEDULE_FACTORY, SCHEDULE_FACTORY, START_ALL_ENVIRONMENT, START_ENVIRONMENT, START_FACTORY_RUN, STOP_ALL_ENVIRONMENT, STOP_ENVIRONMENT, UPDATE_ENVIRONMENT, UPDATE_FACTORY, UPDATE_ORG_METADATA, UPDATE_PRODUCT, UPDATE_ROLE, UPDATE_STAGE, UPDATE_STREAM, UPDATE_USER, UPDATE_USER_METADATA, VIEW_FACTORY_RUN_HISTORY Reader Scope: the user has permission to see all records but cannot do any changes. Set permissions: MANAGE_STREAM, MANAGE_STAGES, MANAGE_PRODUCTS, MANAGE_FACTORIES, MANAGE_ENVIRONMENTS, MANAGE_USERS, MANAGE_ROLES, VIEW_FACTORY_RUN_HISTORY, MANAGE_ORG_METADATA, MANAGE_COMPONENTS Note Please note that by 'manage' the user can only view the streams, stages, products, factories, environments, users, roles, the factory run history, organisation metadata and components. A user with the 'reader' role cannot edit anything. All the roles can be customized to every user's needs. Depending on the organization role, a user may/ may not have serveral permissions (eg. if the organisation does not have the assemble module, then the user will not be able to see the stages, the streams. The user will only see the environments, users and probably the metadata)."
  },
  "home/techguides/deploy-an-update-to-an-existing-environment.html": {
    "href": "home/techguides/deploy-an-update-to-an-existing-environment.html",
    "title": "Introduction",
    "keywords": "Introduction This document can be used by technical staff who need to deploy different features on a Temenos Continuous Deployment Environment. Each Environment has an associated Repository for uploading different type of features based on the Environment Template type, these features being deployed automatically to your Environment. Before proceeding, please check the following requirements: Make sure you have a GUI Git Client installed in your local machine. This guide uses TortoiseGit Git Client that can be installed from here . Make sure you have an user created under your organisation that has a public ssh key attached. Please check this guide to understand how you can create an user or how you can generate and attach a ssh key to an user. Clone Environment Repository • Please login to your organisation, select your environment and locate the Endpoint of Repository Application (this is the last available endpoint on the environment page). Click the copy to clipboard icon from the right: • Create a folder in any location from your local machine. In the current example, a folder name GitLabRepo is used. • Go to your local repository folder(GitLabRepo folder in our example), right click inside the folder and choose Git Clone . • The bellow screen is opened where you have to paste the Endpoint of Repository Application of your Environment in URL textbox, set the Directory textbox to your local repository folder(GitLabRepo folder in our example) and load your private key. • Content is downloaded from the Repository of your Environment to your local machine. Repository Structure The repository structure on your local machine should look like this: Warning Do not delete, change or move the environment folder . This contains the manifest file. Folder Functionality addons This folder is designed for AppDynamics. Upload files as JAR. client_files\\h2db Local H2 database that will be uploaded to the Cloud Environment. Database username must be t24 and password t24 (case sensitive). Database name is mandatory to be “TAFJDB.h2.db” (case sensitive) and must be archived as a ZIP with name TAFJDB.zip (case sensitive). If the above conditions are not satisfied, the database will not be uploaded to the Cloud Environment. This procedure will replace the existing database in the cloud with this one. The old database will be lost , including any records loaded manually. client_files\\helptext Custom Help Text files can be uploaded in this folder. The file structure must be the same as HELP.TEXT T24 core. Thus, under client_files\\helptext folder, the HelpText folder with subfolders for each component (AA, EB, PP, etc.) is expected. packages One or more T24 DS (Design Studio) packages can be uploaded into this folder. All packages will be deployed automatically inside T24. plugins WAR files can be uploaded in this folder. The files will be deployed inside Jboss EAP. In addition to this, endpoints related to plugins can be automatically added to an application. For more details, check this guide . updates The updates files downloaded from the portal in zip format. The files will be copied to the update folder and the T24 Update procedure is triggered. wsdl WSDL files and folders that are required by plug-ins (war file) need to be uploaded here. Additional folders The bellow folders are not present as default in environment repository. In any of the bellow functionalities is required, the folder related to that functionality must be first created in environment repository and only after this the functionality of the folder can be used. Folder Functionality client_files\\localjars This folder is designed for local JARs (not released by T24 Core) installation. Any JAR file used by T24 or other parties can be uploaded in this folder. During deployment, all JARs present in this folder will be deployed in the environment. If a JAR file is corrupted or some dependencies are missing, the environment will not start. client_files\\localjars\\ext This folder is designed for local JARs installation inside TAFJ/ext folder from the environment. Commit & Push features to Repository • Go to repository folder from your local machine(GitLabRepo folder in our example) and copy your file/files (related to your required features that must be deployed to your Environment) to the specific folder/folders based on your requirement. In this guide, an update is pushed to the Environment Repository. Important: T24 Updates must be packaged as .zip of .zip file while it is deployed through the Git repository (the parent .zip file name can be anything). Example: T24-updates.zip |__T24-Updates-2020-X-Y.zip |__ *.Jar • To commit the files/files to Environment Repository, right click inside repository folder from your local machine and choose Git Commit -> \"master\"... option. • The following screen will appear in which your repository changes can be observed and commited. In order to commit, you have to input a commit message and check the checkbox next to each new file if it is the case. • The following screen will appear in which you have to push your changes to Environment Repository. In order to push, click the Push button. • In the next screen, you have to click Ok button. • Finally, the status screen for your push action is displayed. Trigger Deployment • After all required features are commited and pushed to Environment Repository, you have to deploy these features in your Environment. To do this, login to your organisation, select your environment, locate Repository Application and click the Deploy button. • The Environment and its manageable Applications status will be changed to Deploying during the deployment process and the Deploy button becomes disabled until the deployment is finished. The logs generated by the deployment process can be also observed in the Events tab of your Environment where a new event for RepositoryDeploy will be created. Note The deployment process is triggered manually by the user after commiting and pushing all the required features in Environment Repository or whenever is appropiate based on the fact that the user can commit and push features to Environment Repository multiple times and choose when to trigger the deployment. Deploy an update to an existing environment Go to your environment and click Go to Application in order to log to T24 Browser. Sign in with your T24 user and password. Note First T24 login will take a bit longer. In the command line, type TS, BNK/T24.UPDATES and press Go button In the new screen, put the service from Stop to Start and press Commit the deal button on the left. (This will trigger the deployed updates). Go back to the portal, click your environment and click Monitor Application . Sign in with your user and password. Go to Execute servlet under Execution. Type the command START.TSM and then press Submit . Go back to T24 browser and in the command line type SPF S SYSTEM and press go. In the new screen, scroll down until you see the updates that were added. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: UPDATE _ USER (to add the SSH Key if this hasn't been done after creating the user) CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT DELETE _ ENVIRONMENT BOOST _ ENVIRONMENT REDEPLOY _ ENVIRONMENT START _ ENVIRONMENT STOP _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/environment-basic-operations.html": {
    "href": "home/techguides/environment-basic-operations.html",
    "title": "Environment Basic Operations",
    "keywords": "Environment Basic Operations After creating an environment, there are several actions (operations) that can be done via the available buttons: start all environments, stop all environments, clone, edit, delete, start, stop, rebuild, export the database and deploy the repository and also using the endpoints related to T24, the database or to the repository. Environment buttons Start All User Environments button - use this button to only start all user environments Stop All User Environments button - stops all running VMs that are part of the Environment Refresh the page - use this button to refresh any action in progress (related to an environment but also to a factory) Creating a new environment - displays the fields required to create an environment. here you can give a name and a description to your environment and choose a template Cloning an environment - creates an identical environment by copying the Environment and configuration repository Editing an environment - allows you to change the name and the description of an environment Deleting and environment - removes all resources including VMs and configuration repository that are part of an Environment T24 Release section - available actions Endpoints : GO TO APPLICATION - clicking this endpoint, a new tab containing the T24 BrowserWeb URL will open in a new browser window. The username and password to be used here will have been sent via email. MONITOR APPLICATION - clicking this endpoint, the TAFJEE Servlets page will open in a new browser tab and from here you can check the following sections: Diagnostic section: provides details about your TAFJ environment, get routine compilation details, etc. Execution section: run services, etc. Troubleshooting section: access log files, commo files, etc. tcdSFTP.temenos.cloud - allows you to copy the SFTP link. Design Studio Kit - you can start downloading Design Studio tool (DS version is compatible to your environment). Buttons Starting an environment: After creating an environment, the Start button is automatically disabled as the environment is running. It will be enabled if an environment is stopped and it will start all the instances specified in the Environment configuration. When the environment is stopped, start button is supposed to start the VMs where the database and the application server of a T24 environment are installed and also to start the application server (jboss, wildfly, WebSphere, etc.) so that T24 to be up and running. However, please note that start button is not triggering also the deployment of whatever is present into the associated Git repository (such as something that was committed when the environment was stopped or a T24 update package ( L1 development) that was not yet successfully deployed to the T24 area). Stopping an environment - stops all running VMs that are part of the Environment. Rebuilding an environment - it recreates the resourses into the cloud and re-installs T24 and H2 db. This is used for example when modifying the application templates (eg. changing the T24 displayed name or adding a new application). Exporting an environment allows to export and import an environment or a database through SFTP server Clicking the 'Export Environment' button will generate a zip file on the tcdSFTP.temenos.cloud portal containing: all jar files deployed in T24 sandbox and the correspondent module.xml file; the content of the default folder of T24; all war files deployed in the T24 sandbox and the Jboss server log. Database section - available actions Buttons Export the database - by clicking the \"Export database\" button a zip file will be generated in the tcdSFTP.temenos.cloud portal which will contain the current database of the sandbox. Note: This database can be used as a backup that can be deployed later on into the sandbox as a duplicate for testing/development or for local development before deploying to the cloud. Endpoints tcdSFTP.temenos.cloud - allows you to copy the SFTP link. Repository section - available actions Buttons Deploy button - used when deploying newly added plugins, endpoints, updates, web services, packages etc. Endpoints This section displays the GitLab repository correspondent to your T24 sandbox that you can copy it in order to clone the repository. example: git@tcdGitlab.temenos.cloud:1dyomzt4lxuyo/corebanking.git Note IMPORTANT! As a good practice and in terms of reducing your costs, it is recommended that you don't keep an environment unused . Even if it's not used, it will still generate costs. The environment will be deleted by the Extend team (with a prior mail notification) when it is unused for more than 3 days (for internal clients), respectively for more than 7 days (for external clients). Also to reduce costs, the environment can be put on Stop and started only when required. The environments that are stopped will not be deleted. Schedule Environments Users have the option to schedule environments at their convenience. To proceed: go to the left-side menu click on General select the 'Schedule Environments' tab The user can either start or stop all environments on certain dates, days or at a certain hour (UTC time zone). User Permissions Required To be able to perform basic environment operations the below permissions need to be enabled for your user: MANAGE _ ENVIRONMENTS CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT DELETE _ ENVIRONMENT BOOST _ ENVIRONMENT REDEPLOY _ ENVIRONMENT START _ ENVIRONMENT STOP _ ENVIRONMENT ALLOW - EXPORT - ENVIRONMENT START - ALL - ENVIRONMENT STOP - ALL - ENVIRONMENT SCHEDULE _ ENVIRONMENT ALLOW - EXPORT - ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/environment-creation-in-paas.html": {
    "href": "home/techguides/environment-creation-in-paas.html",
    "title": "Manage environments",
    "keywords": "Manage environments Extend module has the capability to provision environments in a variety of different configurations. Users can initiate a new environment and select from a predefined list of templates the application, the release and stack they wish to provision. Each month we host a new template with the latest release of Temenos suite. The environments are customizable in terms of Name and brief description to explain their purpose. The templates follow the official Temenos configuration stack but they can be customised for Releases 2016 onwards. Create your own environment: Either click the Environments tab on the left menu and then click New Environment button on the top right corner. Or you can already see the environment page open with the fields available to create a new environment. Fill Name and Description fields Select one of the available templates from dropdown list, based on your requirements Click Create environment All fields are mandatory except 'Labels'. Note The environment creation may take around 20 minutes or more, depending on the selected template. Templates Check the list with all available templates. Click the Templates Catalog on the left menu. Currently, the screen that opens will display an FCM and T24 default template. Click on the Template Type and select for one of the applications, for example T24 to see the latest retail Suites versions and other available templates."
  },
  "home/techguides/export-import-database.html": {
    "href": "home/techguides/export-import-database.html",
    "title": "Export and Import Databases",
    "keywords": "Export and Import Databases This user guide explains how to import and export databases of a Temenos cloud environment in order to migrate datasets across environments. Login to your organization on the TCD (Temenos Continuous Deployment) portal ( portal.temenos.cloud ) read and accept the privacy notice. Create an Environment Once logged, go to the Environments tab on the left and then click New environment button on the right. Fill Name and Description fields. Select T24 from Cloud Native Applications (dropdown list). And then choose a T24 template with the version that you need (in current example R18.11). Labels field is optional . Click Create button. Wait about 15-20 minutes to see the action completed and to have your environment available. Note To see how to create an environment, please also check this user guide. Note For this user guide, there are two environments created: DevEnv DevEnv1 They will be used to see how to export the DB from one environment and import it into the other one. Amend a customer record Go to User Menu > Customer > Amend Customer In the new screen, type a customer number from your db (ex. 190094) and click Find Then click amend button Change the GB Town/City from the Physical Address tab and then press Commit the deal button in order to save the change. ( Note : You can do any change on any record type) Two notifications about Customer's documents will pop up > Mark them as ' Received ' and Click \" Accept Overrides \" > Transaction is complete The next step is to authorize the record change: Log out and login with a different user (in production, this user will have special rights) Go to User Menu > Customer > click Authorise/ Delete Customer menu Click authorise button ( double-check ) > The screen is expanded with the details of the customer > Click again authorise Export the Database In case you want to export and re-import the database into an environment or do some changes and import it back or to a different environment, please follow the steps below: To trigger the export, click the Export button under Database (also confirm the action on the pop-up to be able to proceed). After clicking, it will start exporting (the action should take less than a minute or more minutes based on the DB size). While exporting, the button is disabled, after the export is done, the button gets enabled back. Note Please note that the same steps showed in this demo can be followed to export an environment. Start exporting by using the Export button (check the available buttons under T24 Release). During this action, the db is exported through SFTP server to which you have to connect in order to download the related content on your local machine. Download WinSCP from here . Open WinSCP and create a new site which will allow the connection through SFTP server: For host name, use the endpoint of the db. (You can copy it from your portal by clicking the copy icon near the endpoint of the database - 'sftp.temenos.cloud'). For the user name, put the PaaS user name that you have created on the portal. (Check Users tab to see the available users). Instead of password, click Advanced A new screen is open Choose SSH > Authentication > and browse for the private key related to your portal user > click OK. After attaching the SSH key, click on save button – here we can give a site name that we want for future use. Previous screen will appear - click login to connect to the SFTP server. It will search for host and connect to it. A successful connection will display two sides as follows: On the left side - the location from your local machine where the db will be downloaded. On the right side - the location of the exported db on the SFTP server; the DB is saved in the folder with the organization id and environment id ( /organisationID/environmentID folder structure ). The database appears as TAFJDB.zip. In order to download the zip, select it and press F5. After is being downloaded, you can unzip it to see the db file. After this step, you can close the SFTP connection: Session > Disconnect. Clone the Target Environment For each Environment there is a Repository associated to it. This repository needs to be cloned locally and then the database will be pushed into it. Next step is to deploy it to the Temenos Cloud target environment (DevEnv1 in current example). To be able to clone, you need to have a GUI Git Client installed on your local machine. Example: Tortoise Git Also, during cloning, it will be necessary to attach the private ssh key related to your portal user. (If needed, please check this user guide). Login to your environment on the portal, locate the endpoint of the repository and copy it by selecting it OR clicking the icon on the right. Create a folder on your computer (you can place it anywhere on your local machine). In this example is named 'GitDemo' Click right inside the folder and choose Git Clone (this command belongs to TortoiseGit) In the screen that opens, fill the following: in the URL textbox, paste the Endpoint of Repository Application of your Environment (previously copied) the Directory textbox to your local repository folder should be automatically determined as current folder location load the private key (this is the private key corresponding to the public key of your portal user) click OK The content is downloaded from the repository of your environment to your computer, displaying a success message if the cloning was correct. You will be able to see the corebanking repository structure with several folders like: addons, client_files, packages, plugins, updates, wsdl etc. The TAFJDB.zip must be placed into client_files > h2db folder: Note In case you made changes to the db file, please make sure you archive it as a ZIP and rename it as TAFJDB - capital letters are case sensitive - before pushing it into the repository). Also note that this procedure will replace the existing database in the cloud with this one. The old database will be lost, including any records loaded manually. Commit and Push the DB Click right inside the h2db folder and choose Git commit master , check the not versioned files that you want to push (in this case TAFJDB.zip), put a comment in the box, then commit and push. After the success message, close the box. Deploy DB and Check the Change Go back to the portal to the target environment and click the Deploy button under the Repository After the deployment is done, you can check the change of the database as follows: Click Go to Application to open a T24 Browser Login with your T24 user and password Under User Menu, go to Customer > Individual Customer > More Actions > Search Live File (from dropdown arrow) and click Go The searched record is displayed > Click on the search/selection button on the left > The GB Town Country line should be changed into Portland confirming the correct import of the database User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT REDEPLOY _ ENVIRONMENT MANAGE _ ENVIRONMENTS ALLOW - EXPORT - ENVIRONMENT To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/factories.html": {
    "href": "home/techguides/factories.html",
    "title": "Factories",
    "keywords": "Factories Factories are the core Assemble components that define how, what and when to deploy, test and promote the various components used by an organization. Below you will find the pre-requisites to run a factory: - 1 stream - 2 stages within the stream you created a. Source stage - the stage from which pre-tested stable components can be picked up b. Base/Test Stage – the stage from which the “Other Products” (Base Products) components are fetched. This stage represents a stable version of components that is pre-tested from the perspective of the current factory. - 2 products a. Principle Products – Principle products simply mean the list of components that are being tested against a stable set of other pre-tested components. After successfully running the factory, the principle products are promoted to the next stage (the configured one). b. Other products (Base Products) – Products that are pre-tested (by other factories) and are known to be stage. These are products that don’t need to be promoted but they are required to test the Principle Products. - 2 templates a. Environment Template - holds the details of the template that is to be used to deploy the components selected by the factory b. Test Template – specifies the template that is required to deploy a test environment that holds the testing framework and test scripts. This is needed to generalize the test tools as a template. Validations The list of selected products cannot contain components that are not understood by the selected Environment Template. a. The list of components contained in the principle and other products needs to match a bare minimum of all mandatory components specified in the template. b. The list of components can possibly have more than one component of the same type if the template allows more than one count of the same type. c. The list of components cannot contain a component type that is unknown to the Template. Templates – The selection of templates are restricted based on the type of the template and a selection list is already confined to allocated and valid templates. Stages – No restriction. The factory can even choose to use the same Stage for all three stage values. Note See below configurations to understand better how to configure correctly and the factory's behavior. How to Set-up/ Edit/ Delete Factories Set-up/ Create a Factory Click on Settings button on the main menu on the left. Make sure you select first the Stream and Stage (this is the stage where components are promoted) where you want to create a factory and then click New Factory button on the top-right. Fill the required fields (see all definitions above and also below example): Factory Details Factory Name : choose a meaningful name for your factory. Factory Description : insert a description that will help knowing what the factory is about. Product Configuration This tab represents the test configuration that holds the template, the products and the source stage that are pre-tested from the perspective of the current factory. Template : choose an Environment Template from the dropdown list. Based on this template the environments will be created where you will be able to test different products Select Principle Products : following a successful run, the principle products are promoted to the next stage (the configured one) Source Stage : this is the stage with the stable version of components Select Other Products : you can select more products that are required to test the Principle products click Next Test Configuration The Test Configuration consists in in-build service tasks and is used to trigger tests for a given factory-run, trigger export of application logs. Select Workflow : a drop-down list with factory workflows added by the Temenos team. In the future users will be able to create their own workflows. As of now, there is one default workflow that is assigned to the users. By request, the Temenos Cloud and DevOps team can provide 3 additional workflows (COB Workflow, Full Workflow and Two Steps without COB Workflow). Depending on the user's workflow, additional configuration steps may need to be followed. Below is an example of how the Full Workflow should be configured: Step 1 : select the test template, component, the number of VMs needed, the test stage and tick if the workflow should stop in case of failure. At the end of this step, when the first round of tests has been finished, the test VM will be deleted, but it will not stop the T24 environment (this will be done at the end of the workflow) Step 2 : type in the ID of the TSA.SERVICE record for which COB has to be run. The id can be either group specific id (eg: COB-1, COB-001) , company specific id (eg: COB-GB0010001) or COB Step 3 : insert the template, component, the number of VMs needed and the test stage where you would like to test the components Workflow steps : a sample which displays the steps (in that exact sequence) that are executed by the selected workflow Promotion Configuration This configuration enables the user to select all the required principle products along with the target stage to which they will be promoted after a successful factory run. In addition, the user can select the Test Components along with the target stage if they need promotion as well. Factory Scheduler A user has the privilege to configure the schedule of the factory run in order to automatically run the tests and have the results available daily the scheduler can be configured to run one time per day if the factory run test is successful you can choose to stop/ or keep running the T24 environment the same applies for the Factory Run Failure scenario The 'Stop Environment' and 'Keep Running Environment' options are aimed to be used for costs purposes Edit a Factory Click the Edit button Any field can be changed/ edited as long as the entire Factory configuration complies with the validation rules Click the Update button Delete a Factory You can easily delete a factory by clicking the delete button The products, stages and streams created before can be re-used. User Permissions Required To be able to perform the above operations the following permissions need to be enabled for your user: MANAGE _ COMPONENTS MANAGE _ STREAMS MANAGE _ STAGES MANAGE _ PRODUCTS CREATE _ FACTORY UPDATE _ FACTORY DELETE _ FACTORY To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/factory-migration.html": {
    "href": "home/techguides/factory-migration.html",
    "title": "Factory Migration",
    "keywords": "Factory Migration Below you will see what are the steps involved to perform the factory migration from an existing platform. As part of the platform upgrade process, all the existing Factories of the platform (all organizations) are also migrated. The factory migration involves populating appropriate tables with the default values wherever applicable. The end-user will not be able to run a factory until the Test Script component is defined. In order to do so, existing TestCases have to be migrated. The migration is nothing but repackaging existing TestCases in to a format that the platform understands. Please follow the below steps to migrate the TestCases: Identify and download the TestCases of the factory in the repository located at {default-stage}/{stream}/{stage}/TestCases/TestCases/testcases.zip. After the download is complete, leave the zip folder with the same name or rename if required. Zip again the downloaded zip file from the Artifactory. Rename the new zip folder if required. This new zip file will be uploaded to the Artifactory. The file's structure should look as below. Create a new Component (eg. TestCase01) in the portal. The Component Type will be ‘TestScript’ Upload the zip file from the Step 5 on the Artifactory to the required stage Select the previously created Component and Stage the in the** Test Configuration** of the factory Other Scenarios Case 1: Note that a Test case can have multiple scenarios (.zip files) in a Stream . In such cases download all of the .zip files and re-package them again in a single zip file so that it can be uploaded to Artifactory. As shown below the multiple .zip files from Artifactory are downloaded and repackaged using a parent zip folder called Accounts.zip. This new zip file will be uploaded to the Artifactory as a component. Case 2: It is also possible to have multiple Test cases and each Test Case can have multiple scenarios (.zip files). In such cases download all the zip files and rename to avoid conflicting names, archive them to a parent zip folder. As shown below by colouring the downloaded zip files are renamed since the zip file names are conflicting and moved to a common folder called TestCase01. This folder TestCase01 should be zipped and uploaded to Artifactory. Notes : • There is no constraint on folder names. • Upon successful test execution, i.e. if all test cases are passed then the TestCase01 component will be promoted to target stage. • Only one Test Script/Test Component can be configured in a factory. Thus, if the user wants to run multiple test scenarios and promote it separately to different stages then it should be added in individual factories."
  },
  "home/techguides/fcm-configuration.html": {
    "href": "home/techguides/fcm-configuration.html",
    "title": "Configure FCM Application",
    "keywords": "Configure FCM Application Learn how to use FCM application by accessing it via Temenos Continuous Deployment Platform. Note Check also our Video tutorial - to be updated. About FCM Template Login to your organization on the Temenos Continuous Deployment Platform ( https://portal.temenos.cloud/ ) using the username and password provided by the Temenos team Each time you login, you must accept the Privacy Notice in order to have access to the portal Click the Templates Catalog on the left-side menu Choose the FCM template version from the available list to see the short description of the components and also the full template content The listed information comes from an infratemplate.yml file that describes the template used for an environment Create an Environment using the FCM Template Go to Environments tab and click New environment Fill the mandatory fields: Name Description Select an application from Cloud native applications Choose a template from Templates list Labels field is optional Click Create Note It will take about 15 minutes for the new environment to be created FCM Endpoints Check the two endpoints available in the FCM application: Financial Crime Mitigation Interfaces Module A new login is required when accessing the first endpoint (Financial Crime Mitigation) > Next you will see all available modules of the FCM Suite The Interfaces Module displays: The Pipelines The End Points The JSON configuration file Main steps to follow Connect to FCM using an SFTP server Place a message to be processed Check the processed message into the application Create a User on the Portal This is required later when logging to the FCM through SFTP server connection, because it checks the authentication to the cloud environment with that specific user and the attached SSH key. To see all the steps regarding how to add a new user on the portal and to attach the SSH key, please check the following user guide about how to Create Users . Connect via SFTP Client In order to connect to the FCM app, you can install an FTP client from https://winscp.net/eng/index.php Open WinSCP application and fill the mandatory fields: Host name > copy it from the environment endpoints User name > input the exact name of the user added to the portal Click Advanced In the new screen, select SSH Authentication Upload the private key previously saved (corresponding to the public key attached to the portal user) Click OK Previous screen pops-up, click Login Process Messages in the FCM Application On the right window, locate your environment ID - Your organisation ID appears also on the top Double click to access the live folders of the environment > Go to screen_messages folder > mt > input < This is where you have to place the messages to be processed by dragging them from the location identified on the left window In current case, you can see a file \"messages.mtdemo.txt\" representing a swift message in the folder named \"mt demo\" on the desktop. From this location, the file is dragged into the right window in the input folder, from where the FCM application will instantly process it and remove/ delete it from this folder (the action won't be visible). Note Please note that, once the message is moved into the FCM folder ( input ), the application will instantly process it and remove/ delete it from this folder and the action might not be visible. When disconnecting and re-connecting to the server, the input folder will be empty. If you receive the 'Permission denied - Error code 3' notification when trying to move the message, please follow the below steps in WinSCP: Go to options, then Preferences Click on Transfer, then select Default and Edit Select the ignore permission errors Check the Messages in Transaction Alert Manager Go to the portal to your environment Click Financial Crime Mitigation endpoint Go to Transaction Alert Manager Check below the latest processed messages and click Open button to see the message details User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: CREATE _ USER MANAGE _ USERS CREATE _ ENVIRONMENT UPDATE _ ENVIRONMENT REDEPLOY _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/fix-issues-factory-run.html": {
    "href": "home/techguides/fix-issues-factory-run.html",
    "title": "Artifactory",
    "keywords": "Artifactory Each Organisation provided has an repository associated automatically. This repository is available in Jfrog Artifactory and has a default name. Once logged into the portal, you can check the information related to the artifactory by clicking the General button on the left menu. This will display the Metadata Settings. Note: If you wish to have a different name for the repository, you need to go to the Artifactory and create yourself a repository and then update its name in the metadata (ARTIFACTORY_URL). Note: Make sure you set also the ARTIFACTORY_KEY which allows to download the components' binaries at the moment when running a factory. This is when the components and test cases are used. Issue 1. Unable to Create Factory Due to Wrong Product Set-up When setting-up a factory (see configuration steps in this user guide ), in case the products used in the factory don't have the mandatory components uploaded, after pressing the Create button, an error similar to the example below will appear, showing the missing components: How to fix: Based on the template that you want to use, when creating the principle product, make sure you add all mandatory components belonging to that template. To know which are the required components, go to Templates Catalog button, select your template, go to components section inside the template and check which components are mandatory (marked with 'true'). Go back to your Product, press Edit , add the rest of the components required and then press Update . After doing this correction you will be allowed to create the factory. Issue 2. Unable to Run Factory Due to Missing Artifact In case that one of the components belonging to a product doesn't have the binaries uploaded into the artifactory, when running a factory you will encounter an error similar to the below example. This indicates the stream, the stage and the exact component(s) for which the artifacts are missing How to fix: Go to this section to see how to upload the artifacts. After that, go to the dashboard and run again the factory. Note The same error you will encounter in case the test cases aren't uploaded. The error will reflect the stream, the stage and the missing folder. You can also check this user guide to see how to add the test cases."
  },
  "home/techguides/index.html": {
    "href": "home/techguides/index.html",
    "title": "Technical Guides",
    "keywords": "Technical Guides Here you have access to online documentation to help you develop and test the integration of your products through the Temenos Development Platform provided by Temenos SaaS."
  },
  "home/techguides/jenkins-build-promote-pipelines.html": {
    "href": "home/techguides/jenkins-build-promote-pipelines.html",
    "title": "Use Jenkins to Build Pipelines",
    "keywords": "Use Jenkins to Build Pipelines Note Check also our Video Tutorial ! (to be updated) Introduction This document explains how to configure the Jenkins build and promote pipelines. The 'Build pipeline' job builds the artifacts and deploys them into the test environment. Once the testing is successful and it's ready for promotion, the 'Promote pipeline' deploys the tested artifacts into the integrated dev environment. For this tutorial, we will be integrating Jenkins with GitLab (or Bitbucket - depending on your repository) so that Jenkins can pull the code and build artifacts. Main steps Merge the team changes to existing code​. Run the integrated build​. Deploy the changes to a Integrated DEV Environment​. Continue with the existing flow. To implement the Pipeline as a code we will use Jenkins Pipeline in order to automate tasks associated with building, testing and deploying software. Access Development Portal Sign into one of the following URLs (choose the link you have been provided with): https://portal.temenos.cloud or https://tcd-portal.temenos.cloud/ using the credentials provided by Temenos (Username and Password): Create the required environments Fill the following parameters and press 'Create environment' : • Name • Description • Template • Labels (optional) Fill the required fields and press Create . Note It might take about 15-20 minutes to create an environment. Note You will need to create following three environments: • A build environment with the required template ( in our example is \"BuildResources-Jenkins-Jfrog-R18.11\" ) • A source environment with the required template ( in our example is \"Retail Suite R18.11\" ) • A target environment with the same template as the last one. Login to Jenkins After the \"BuildServices\" environment has been created, click on it and go to Jenkins Dashboard: In the new screen, click Login button on the top-right corner: Sign in with user admin and password changeit Note After first login, you will need to change the password. Change the password Click on 'Admin' button on top-right corner and then, on the left side, click on 'Configure' button Input a new password, confirm it, click 'Apply' and then 'Save' Note In case of a coffee break during the Jenkins configuration, the session may expire. Make sure when you come back that you are still logged or login again. Build pipeline workflow Build Pipeline works based on pipeline script (Jenkins file). Requirements: It requires valid credentials to pull the code from your GitLab (or Bitbucket) repository (or a different repository that will be made available). Users need to add credentials to clone the git repositories. For setting up credentials please refer to below section \"Add SSH keys inside Jenkins\" Steps during build: Pulls the code from the Gitlab (or Bitbucket) repository Builds the artifacts using DS binaries Deploys the artifacts in the TEST environments Generate SSH key This section explains how to add the credentials in order to clone the Git repositories. The Jenkins Server requires a Source code repository, which will be taken from Github repository (or another kind of repository that you have), then a Development environment and a Test environment. The dependencies between all of them are done through the ssh keys. The SSH key is used to authenticate between the Jenkins server and the environments. The keys solve different problems such as: user identification, security/ privacy and continuos integration and delivery best practices First, you will need a SSH key, which can be generated by using PuTTY: As instructed on PuTTY screen, move the mouse over the blank area to generate the key. PRIVATE KEY After the key is generated, go to Conversions tab and choose Export OpenSSH key (force new file format) PUBLIC KEY Click on Save private key button Later during Jenkins configurations, it will be necessary to use these SSH keys. To use the public key, you need to click right on the key saved (.ppk format) and select Edit with PuTTYgen Add user to the portal Go to portal.temenos.cloud , respectively https://tcd-portal.temenos.cloud/ . Click on New user And fill the required fields Note Copy-paste the entire public key generated before and press Create user Don't forget to click Save private key from PuTTY Key Generator in order to save the private key that you may use later. Add a second user to the portal The same as for the first user added, first make sure you generated a new SSH key and then: Go to portal.temenos.cloud , respectively https://tcd-portal.temenos.cloud/ . Click on New user And fill the required fields Note Copy-paste the entire public key generated before and press Create Don't forget to click Save private key from PuTTY Key Generator in order to save the private key that you may use later. Add SSH key to GitLab repository We are using GitLab repository, but you can use a different one. In this repository you have to add the ssh keys for the users created in order to connect to Jenkins and build resources. The users created into the https://portal.temenos.cloud/ will be automatically added in the Gitlab repo. Log into GitLab ( https://staging-gitlab.temenos.cloud/admin ) as an admin and follow below steps: Click on the key for admin area: Go to users tab. Search the users created ( example: cristina ) and press enter. In case the user is not automatically added (due to a different platform use), please go to New user button and add the required users. Click on the user name and then on the edit button on the right. Set a password of minimum 8 chars and repeat password for confirmation, then Save changes. Logout from admin menu and login with the new user and the password set before. Change user password: Once you login, you will notice that it will be required automatically to setup a new password (Input your current password > Set a new password > Confirm it > Click Set new password After this step you will be automatically logged out and you need to login again with the new password Click on the user icon on the top-right corner and select 'Settings' Go to SSH Keys tab and paste the public key that you generated before as follows: paste the entire public key > you will notice that the Title field is automatically completed with the last part of the key ( rsa-key-20180731 ) delete the last part until equal sign and press Add key Repeat the same steps from this section ('Add SSH key to GitLab repository') for the second portal user that you created. Add user to your Gitlab project You also need to add the created user to your project and give full access: Note Repeat the same steps below also for the other user created in the portal Login back as an admin and go to admin area ( use settings button ) Click on Projects tab Then find your project Then Manage access on the right Then find your member (user), select Master from dropdown list to give full permission for this user and then Add to project Add credentials and Use ID from 'Temenos-DS-R18.11-Demo' Project Go back to your organisation on TCD portal, click on BuildServices environment and access from there the Jenkins Dashboard. Login with user admin and the password previously changed (see this step ). Inside Jenkins console, go to Credentials from left pane and then click global: Then add credentials: A new screen is open In the Kind box - click the dropdown button and select ‘SSH Username with private key’ Scope - you can leave the default option 'Global (Jenkins, node...)' Choose a username. In current case we have chosen ‘gituser1’ so that we can easily identify that it is associated with demorepo repository in GitHub. Go to Private Key field, select 'Enter directly' and paste the private key generated at previous step Click OK Note The ID field must be completed with the sshagent credentials taken from the JenkinsFile available on https://staging-gitlab.temenos.cloud/root/Temenos-DS-R18.11-Demo/blob/master/JenkinsFile as in the picture above. Add credentials for the second user Go to Credentials from left pane inside Jenkins console and then click global. Click 'Add credentials' and fill the required fields In the Kind box - click the dropdown button and select ‘SSH Username with private key’ Scope - you can leave the default option 'Global (Jenkins, node...)' Insert the second username you just added to the portal. Go to Private Key field, select 'Enter directly' and paste the private key generated at previous step Click OK Now if you click on credentials, you will see the following screen with both users details (on the Jenkins dashboard from your 'BuildServices' environment): Note This unique ID of SSH key will be used in the pipeline scripts (Jenkins File) to clone the repositories. Configure Jenkins pipeline job to use SSH keys Go to My View from left pane inside Jenkins console Click on 'Build' Then on 'Configure' And finally click on 'Pipeline' On the same screen, make sure you have the Jenkins File path in Script Path, then click on Apply and 'Save' Build the Jenkins job It’s time now to go ahead and build our job. Go to left pane inside Jenkins console and press 'Jenkins' button Then click on 'Built on' New screen is open. The following parameters are required to change according to your setup: • SrcRepo • EnvID (see the note below) • emailRecipientsList (optional) Click Build . Note The environment ID is the one that appears on the URL address after you login and you click on your environment: In this case, we have used the DevEnv_201811 created initially on the platform. Build should be successful: Promote pipeline workflow Click on 'Promote Changes' Then on 'Configure' And finally click on 'Pipeline' Insert your repository URL ( in our example: git@staging-gitlab.temenos.cloud:root/Temenos-DS-R18.11-Demo.git ) Credentials: use the second user that you added to the portal Script Path: PromoteChangesJenkinsFile Go again to left pane inside Jenkins console and press 'Jenkins' button Then click on 'Built on' button on 'Promote Changes' line New screen is open: Click Build . Note The image above displays only an example. SourceEnvID is the one of the DevEnv_201811 created on the platform. TargetEnvID is the one of the IntegrationEnv_201811created on the platform. (see here )."
  },
  "home/techguides/manage-environments.html": {
    "href": "home/techguides/manage-environments.html",
    "title": "Manage Environments",
    "keywords": "Manage Environments Organisation ID The Temenos Development Platform support multitenancy and Organisations are designed to be distinctive accounts. Upon subscription you'll receive a unique Organisation Id as a URL link. Your Organisation Id will look similar to this: The confirmation of your Organisation activation will contain the link and access instructions to your designated Organisation administrator. The administrator is the first and only user. Environments The Development platform (Extend) has the capability to provision environments in a variety of different configurations. Users can initiate a new environment and select from a predefined list of templates the application, the release and stack they wish to provision. Each month we host a new template with the latest release of Temenos suite. The environments are customisable in terms of Name and brief description to explain their purpose. The templates follow the official Temenos configuration stack but they can be customised for Releases 2016 onwards. Create your own environment: Either click the Environments tab on the left menu and then click New Environment button on the top right corner. Or you can already see the environment page open with the fields available to create a new environment. Fill Name and Description fields Select one of the available templates from dropdown list, based on your requirements Click Create environment All fields are mandatory except 'Labels'. Note The environment creation may take around 20 minutes or more, depending on the selected template. Templates Check the list with all available templates. Click the Templates Catalog on the left menu. Currently, the screen that opens will display an FCM and T24 default template. Click on the Template Type and select for one of the applications, for example T24 to see the latest retail Suites versions and other available templates. User Roles Required# To be able to create an environment the below permissions need to be enabled for your user: CREATE _ ENVIRONMENT MANAGE _ ENVIRONMENTS To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/metadata.html": {
    "href": "home/techguides/metadata.html",
    "title": "Metadata API/UI – Feature Description",
    "keywords": "Metadata API/UI – Feature Description A metadata is a key-value pair that represent an organization specific information (For example “Artifactoty_URL” / “http:xxxxxxxxxxxx/xxxx/xxx”) to help with the functions and workflows of the Extend and Assemble modules. An organization can have any number of such key-value pairs to enable operations. Every Key (from the Key-Value pair) within an organization needs to be unique and cannot be duplicated. The system will throw appropriate errors when such duplications are attempted. Each metadata, apart from the “Key-Value” information, also has the below fields: A Unique GUID (Globally Unique ID) – Used for internal references Key – The key that the organization requires Value – The value for the key KeyEditable – Specifies if the key of the record is editable. This is used by the system and prevents users from editing the key itself. But allows edit of the value if “editable” is set to true. Editable – Specifies if the key-value pair is editable. Keys with editable false are always created by the internal system and users cannot edit such records Deletable – Specifies if a record can be deleted by a user. Similar to Editable, such keys are always system generated and cannot be deleted by a user. Encrypted – Values for such keys are stored in an encrypted form in the DB to protect sensitive data. The UI featues will not allow modification of the following fields: Editable KeyEditable Deletable Encrypted"
  },
  "home/techguides/release-info-2020.html": {
    "href": "home/techguides/release-info-2020.html",
    "title": "Release Notes",
    "keywords": "Release Notes This page provides information about the monthly Temenos Continuous Deployment Platform features and improvements in each release. 2020.02 Release Notes InfraBuild : 362 | PortalTag : cloudPortal_1.79e | ControllerBuild : 26 Technical Enhancements 1. Exception list added to the Organisation scheduled shutdown - users with the \"UPDATE_ENVIRONMENT\" privilege are able to add an \"scheduler ignore\" for environments. Those environments will not be STOPPED or STARTED by time scheduler 2. Whitelist IPs that can acces my environments - users with the \"CREATE_ ORG_ METADATA\" privilege are able to restrict the access of Temenos Continous Deployment Platform environments of that organisations to the IP addresses added to the metadata \"ORG_ IP_ WHITELIST\" 3. Factory Run timeline - issue has been fixed 4. Platform URL included in the System generated email sent to the Org Admins - issue has been fixed 2020.01 Release Notes InfraBuild : 355 | PortalTag : cloudPortal_1.78 | ControllerBuild : 12 Dashboard Enhancements 1. UI Updates - Temenos Continuous Deployment Platform UI has been updated to unify look and feel, behavior, and to improve user experience. The UI changes have been updated on all pages across the documentation portal 2. Component security enhancements - when creating a template from a factory run, all components are copied in the new template folder that secures this template consistency from factory deletion 3. Templates visibility improvements - template identifier on the environment's page added 4. Environment functionality updates : - pop-up confirmation with check box informing both START and STOP all environments added Role Management 1. User access rights : - user profiles can perform distinct functions on the Temenos Continous Deployment Platform. Administrators, operations, developer and test users for examples require different access rights to perform certain operations. The user permissions are explained on this page . Each page from the Documentation Portal will have the access rights displayed for each operation shortly. - users can create roles from permissions - users can add or remove permissions to a role - users (admins) can assign roles to users Security enhancements - Phase 1 1. Controller API keys are now managed by platform Operators such that keys are not shared with customers and the impact of a compromised/revoke key is minimised 2. All vulnerabilities or defects in libraries detected during initial Whitesource scanning of Temenos Continuous Deployment Platform source have been fixed Security enhancements - Phase 2 1. White source scanning is now automated as part of platform build process that Temenos Continuous Deployment Platform Code is scanned each time we build the platform 2. All the Temenos Continuous Deployment Platform 3rd parties were White Source scanned 3. All artifacts pushed in common GitLab and Artifactory are scanned Self Service Capabilities 1. Self Service Setup: - users who have the Assemble module enabled are able to manage their factories , admin product and component s, create streams , schedule and execute factory runs - all users have the option to clone environments , manage their test cases and connect to Design Studio remotely to any Azure Subscription - internal Users can use the Boost function to configure the available templates or build a new template. 2. Users are now able to request an environment based on any factory run to do triage, demo or ad-hoc testing (learn how here ). 3. Organisation administrators now can create a template based on any successful factory run to baseline the environment (learn how here ). 4. Organisation Admin user now can Stop All Environments of the organisation through a single button to Manage Costs (learn how here ). 5. Pop-up confirmation with check box informing both START and STOP all environments added. 6. Factory Management (learn more here ): - ability to redefine factory settings to add/ remove Products - ability to delete a product - ability to delete a component - ability to disable a factory - ability to delete a factory 7. Components Management : - an Artifactory folder structure available view (learn more here ) - a list of all available components in current selected stage - list of all component versions available in the Artifactory 8. Users are now able to Abort any Factory Run in case of need (learn how here ) 9. Users can schedule factory runs (learn how here ) 10. Users can clone Stream s (learn how here )."
  },
  "home/techguides/run-factory.html": {
    "href": "home/techguides/run-factory.html",
    "title": "Run Factory",
    "keywords": "Run Factory After setting-up a factory (see configuration steps in this user guide ), go to Dashboard on the main menu and select the factory you created (in case you have more factories). Note In order to run your factory, make sure first you select the stream and stage where you created the factory (top right) . If the factory has never been run, you will notice the following message on the screen, under the respective factory: The factory has never been run before. Please start the factory process now by clicking on the \"Run Now\" button. Click Run Now . The process is initiated and it will get immediately to the stage where an environment based on your chosen template is created. Note In the event of a mistake, the user can abort a factory run by clicking the 'Abort' button on the top right side of the page. This action prevents you from deploying, testing or promoting the components. The user can edit the factory and then click 'Run now' again to see the results. Clicking on the Environments tab on the left menu, you can check the creation of the environment. The name of the environment will be \"Env for Factory xxx\", where xxx is the name of your factory. Note The environment creation stage may take between 20 minutes and a few hours depending on the template used. A factory can be enabled or disabled at any time. If a factory is disabled, factory runs (both scheduled and user triggered) will not be triggered. After the environment deployment phase is completed, the next phase (stage) is Running Test Deploy. During this phase a test environment is created (you can check it under Environments tab). Note that this environment is automatically deleted after the tests are run and the process is completed. After running the tests successfully, you will see some details about all stages and the results, as in the example below: Based on any factory run, the user can take several actions: Trigger New Environment - trigger a new environment to do triage, demo or ad-hoc testing (this will clone the factory environment) View Environment - view the environment used for the factory run View Event History - view the flow of status of the factory run Create New Template - this contains all the components that were associated with the factory run environment. This new template will be visible in the Templates Catalogue. Note The 'Create New Template' button will be available only if the factory run is successful. If you want to have the creation of the new template enabled even when the factory run fails go to General on the left side of the menu and select the 'Setup Factory' tab. Tick the 'Yes' value that corresponds to the key 'Do you want to allow creation of template from failed factories'. User Permissions Required To be able to perform the above operations the below permissions need to be enabled for your user: MANAGE _ COMPONENTS MANAGE _ STREAMS MANAGE _ STAGES MANAGE _ PRODUCTS CREATE _ FACTORY UPDATE _ FACTORY DELETE _ FACTORY SCHEDULE _ FACTORY START - FACTORY - RUN ABORT - FACTORY - RUN VIEW - FACTORY - RUN - HISTORY To understand what which of the permission does, hover the cursor over the variables and a short description will pop up or click here to get an overview of the permissions."
  },
  "home/techguides/selenium-template.html": {
    "href": "home/techguides/selenium-template.html",
    "title": "Selenium Template Implementation",
    "keywords": "Selenium Template Implementation Note The below instructions may be updated shortly. This page provides information about the Selenium Template, the pre-requisites needed to test the template, as well as an example of the framework structure and the manifest file. Implementation The Selenium Template will provision the following: Windows 2016 VM with the below software/packages pre-installed: Open JAVA / JDK 1.8 the latest version of Google Chrome the latest version of Google Chrome driver (which will be used by Selenium) - this will be present in F:/TCD/WebDriver folder the latest version of Geckodriver (which will be used by Selenium) - this will be present in F:/TCD/WebDriver folder The test script component that can be used by this template must be a .zip file with the following folders: Test suite 1 (this could be any name - it is assumed this as a suite of tests that needs to be executed) 1 or multiple .jar files: these files contain the Selenium test cases to be executed the framework should copy all the test results to F:/TCD/TestResults folder Temenos Continuous Deployment Platform will move the results in this folder to a centralized storage account and provide a download facility from the Temenos Continuous Deployment Platform the framework must create a manifest file as well (the sample structure will be present in the documentation portal). The same must be uploaded to F:/TCD/TestResults folder a folder named \"Lib\" all the libraries that are needed by the test cases must be kept here. This includes the Selenium library, its extension and its dependencies. properties file with at least the following properties (“sys.t24.IP”, “sys.t24.port\", “sys.test.results.folder”, “sys.web.driver.folder”) while the test VM is provisioned, Temenos Continuous Deployment Platform will alter these values based on the IP and Port of the T24 VM it will change the value of “sys.test.results.folder“ to “F://TCD//TestResults” it will change the value of “sys.web.driver.folder“ to “F://TCD//WebDriver” it is assumed that the user name and password will be known by the clients writing test cases and the same will be present in the golden copy this property file can have other properties needed by the jar files, but the Temenos Continuous Deployment Platform will not alter these values at the run time a text file named “CommandsToExecute.txt” the Temenos Continuous Deployment Platform will execute all the commands listed here the Temenos Continuous Deployment Platform will validate whether all the commands are “Java” commands before executing any other commands present here, will result in termination of Factory run saying deployment failure with details mentioning why it failed Test suite 2 follows the same structure as above. These will be executed in a separate test client if test parallelisation is enabled. Otherwise, these will be executed in the same test client once the first test suite is complete. … Test suite n Framework structure example The below shows the test framework folder structure and general expectations: Lib Folder The lib folder contains the libraries used by the Selenium framework. We expect all the library files to be present in the same folder and the relative path should be handled in the test framework. .properties file The properties file holds the configurable parameters used by the Selenium framework. Some of the parameters have static values. Thus, the Temenos Continuous Deployment Platform expects them to be present in the properties file. For instance, sys.t24.IP= http://127.0.0.1:9080/BrowserWeb value is replaced dynamically at the run time. The same applies to all parameters highlighted in the RedBox below. Note T24 browser can use any FQDN and Port. However, the endpoint should be reachable by the test client VM in which the test cases will be executed. Also if the test framework wants to support multiple T24 endpoints then it must be pre-configured same as sys.t24.browser.url. TestCase.jar We expect the test cases to be compiled as an executable .jar file. Note: The Selenium_Automation.zip can have multiple *.jar files. CommandsToExecute.txt This file contains the list of commands that the Temenos Continuous Deployment Platform will execute in sequence. We expect the command to start with “java” as anything other than the java command will be considered deployment failure. In case the Test script has more jar files then the execution of the files can be handled in the CommandsToExecute file. Nonetheless, please remember that Temenos will validate the command and execute it only if it starts with “java” so assuming any other pre-requisites and environment variable will be passed as a runtime parameter. Manifest.xml The Manifest contains information regarding the test run, i.e. the total number of cases, success count, failed count etc. The Temenos Continuous Deployment Platform will use this information to populate the dashboard. Below you will find an example format. From the below structure, the Temenos Continuous Deployment Platform needs to mandate the following information in order to populate in the dashboard: <passedTests>11</passedTests> <failedTests>3</failedTests> <totalTests>14</totalTests> <Name>Temenos Automation Testing Framework</Name> <toolVersion>1.2</toolVersion> <startDate>2020.04.03 09:34:34</startDate> <duration>112.94700</duration> <result>FAIL</result> <hostName></hostName> The test framework should generate the manifest.xml file with the above details. The below table describes the manifest tags and its purposes. Tag Description passedTests It denotes the prorated number of passed test cases in the current run. failedTests Number of failed test cases in the current run. totalTests The overall test cases count in the respective run. result The overall test result. The value should be “FAIL“ even if there is a single failure. An example of the manifest format: <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <!-- configured only by authorised user--> <Manifest> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>get <https://t24URL/BrowserWeb</TestCaseName>> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>setText (id signOnName *****)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>setText (id password )</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>switchToFrame()</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>FAIL</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>setText (id commandValue CUSTOMER I F3)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>FAIL</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>FAIL</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> </Report> <Report> <ScenarioName>Temenos Testing</ScenarioName> <TestCaseName>sleep (sec)</TestCaseName> <ExpectedResult></ExpectedResult> <ReportStatus>PASS</ReportStatus> <ReportImagePath>F:\\TCD\\TestResults\\automation-screenshots\\screenshot4955634319564025885.png</ReportImagePath> </Report> <passedTests>11</passedTests> <failedTests>3</failedTests> <totalTests>14</totalTests> <Name>Temenos Automation Testing Framework</Name> <toolVersion>1.2</toolVersion> <startDate>2020.04.03 09:34:34</startDate> <duration>112.94700</duration> <result>FAIL</result> <hostName></hostName> </Manifest> By clicking HERE you can download the sample of the Selenium Test framework, which is capable of running sample UI based tests."
  }
}